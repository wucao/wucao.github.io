<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叉叉哥的BLOG</title>
  
  <subtitle>Python毁一生，Java穷三代，两者皆不沾，必成高富帅！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xxgblog.com/"/>
  <updated>2020-03-24T12:32:27.697Z</updated>
  <id>https://xxgblog.com/</id>
  
  <author>
    <name>wucao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud Eureka 服务实现不停机（Zero-downtime）部署</title>
    <link href="https://xxgblog.com/2020/03/24/spring-cloud-eureka-zero-downtime/"/>
    <id>https://xxgblog.com/2020/03/24/spring-cloud-eureka-zero-downtime/</id>
    <published>2020-03-24T03:14:16.000Z</published>
    <updated>2020-03-24T12:32:27.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>互联网产品高速迭代，通常伴随着高频次的版本发布。部署新版上线需要重启服务，直接 kill 服务进程可能会造成服务短暂不可用，从而影响到正在使用的用户。</p><p>Spring Cloud 项目中一般会用到 Ribbon 作为负载均衡，那么是不是只要保证每个服务部署多台服务器，发布时采用 Rolling Update 分批次部署，保证一部分服务器正常提供服务的同时发布另一部分服务器，Ribbon 就能自动切换，保证服务的不间断？然而并不是。</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>所有服务的状态保存在注册中心，即 Eureka Server。一个服务要想获取其他服务的实例列表和状态，需要通过 Eureka Client 定时从 Eureka Server 中获取并缓存下来，默认时间间隔是30秒。Eureka Client 和 Eureka Server 是通过 HTTP 协议通信，请求由 Eureka Client 发起，而不是基于长连接或者 Eureka Server 主动推送，所以无法立即知道其他服务状态变更。</p><p>即使同一个服务部署多台机器，每台机器依次发布，当其中一个服务实例重启时，服务调用方是无法第一时间知道的，所以还是会调用到这台暂时无法提供服务的实例上。这样会造成短暂的访问失败，这段时间也会对正在使用产品的用户造成一定的影响。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>基于以上的原因，在部署应用时应该按照以下步骤进行（为了简单起见，假设一个应用部署两个实例）：</p><ol><li>将服务的一个实例在注册中心的状态设置为 DOWN</li><li>等待一段时间，直到其他服务缓存刷新，不再调用到这台服务器上</li><li>停止服务，更新代码，重新启动，等待，直到启动成功</li></ol><p>完成后，再重复以上步骤部署另一个实例。</p><h3 id="第一步：修改服务实例状态为-DOWN"><a href="#第一步：修改服务实例状态为-DOWN" class="headerlink" title="第一步：修改服务实例状态为 DOWN"></a>第一步：修改服务实例状态为 DOWN</h3><p>有两种方案可以修改实例的状态，选择其一即可：</p><ol><li>直接调用 Eureka Server API 修改：PUT /eureka/apps/{appID}/{instanceID}/status?value=DOWN</li><li>调用服务实例对应的 actuator endpoint：<code>/service-registry</code></li></ol><p>我更偏向使用方法二，对应的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -X POST http://&#123;host:port&#125;/actuator/service-registry?status=DOWN</span><br></pre></td></tr></table></figure></p><p>如果 actuator endpoint 加了 Spring Security Basic 认证，则还需要加上用户名和密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type:application/json"</span> -X POST -u &#123;username&#125;:&#123;password&#125; http://&#123;host:port&#125;/actuator/service-registry?status=DOWN</span><br></pre></td></tr></table></figure></p><h3 id="第二步：等待其他服务缓存刷新"><a href="#第二步：等待其他服务缓存刷新" class="headerlink" title="第二步：等待其他服务缓存刷新"></a>第二步：等待其他服务缓存刷新</h3><p>具体要等多久，其他调用者的请求才会不再访问到这台状态为 DOWN 的实例？这里涉及到三个配置项：</p><ul><li><code>eureka.client.registryFetchIntervalSeconds</code> Eureka 客户端每隔多久去 Eureka 服务器拉取最新的注册信息，默认值 30（秒）。</li><li><code>ribbon.ServerListRefreshInterval</code> Ribbon 的缓存刷新间隔时间，默认 30000（毫秒）。Eureka 客户端拉取到最新注册信息后，Ribbon、Feign 等组件不会立即生效，是因为 Ribbon 还有一层缓存。</li><li><code>eureka.server.responseCacheUpdateIntervalMs</code> Eureka Server 返回最新的注册信息的接口缓存刷新时间间隔，默认 30000（毫秒）。有时候会看到 Eureka 页面和 <code>/eureka/apps</code> 接口的服务状态不一致，就是因为 <code>/eureka/apps</code> 接口默认会有 30 秒缓存。</li></ul><p>在默认情况下，当一个服务状态改为 DOWN，最长可能需要 30+30+30 秒，所有的缓存才会刷新，其他调用者才不会调用到这个状态为 DOWN 的实例。这就意味着修改服务实例状态为 DOWN 后需要等待 90 秒，才能进行下一步操作。</p><p>为了让部署时间缩短，可以将以上三个配置项都修改为5秒：</p><p>Eureka Server：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    responseCacheUpdateIntervalMs:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></p><p>Eureka Client（即各个服务）：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ServerListRefreshInterval:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registryFetchIntervalSeconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>完成以上配置，部署时将实例状态设为 DOWN 后，只需要等待 15 秒即可停止进程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep 15s</span><br></pre></td></tr></table></figure></p><h3 id="第三步：实例部署"><a href="#第三步：实例部署" class="headerlink" title="第三步：实例部署"></a>第三步：实例部署</h3><p>这一步主要需要注意</p><ul><li>尽量不要使用 <code>kill -9 pid</code> 强制杀掉进程，而应该使用 <code>kill pid</code> 或者 <code>kill -15 pid</code> 关闭进程。使用 <code>kill pid</code> 或者 <code>kill -15 pid</code> 关闭进程之前，Eureka Client 会给 Eureka Server 请求删除自己，后续服务再次启动后会重新注册为 UP 状态。如果使用 <code>kill -9 pid</code> 强制杀掉进程，Eureka Client 没有办法注销自己，Eureka Server 就不知道该实例已下线，直到长时间收不到心跳才会删除该实例。如果在 Eureka Server 删除实例之前实例启动了，那么它的状态还是会保持 DOWN 状态。如果确实需要用到 <code>kill -9 pid</code> 强制杀掉进程，那么服务重启后需要再通过第一步的方式将实例状态设为 UP。</li><li>服务启动后，需要等待并确认启动成功后，才可以开始部署下一台服务器。这里我们可以定时去请求 Spring Boot 提供的 actuator endpoint <code>/health</code> 接口，例如每隔 1 秒请求一次，直到接口可以正常访问，即可认为服务启动成功。</li></ul><p><em>本文基于 Spring Boot 2.1.x 及 Spring Cloud Greenwich 版本</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;互联网产品高速迭代，通常伴随着高频次的版本发布。部署新版上线需要重启服务，直接 kill 服务进程可能会造成服务短暂不可用，从而影响到正在使
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://xxgblog.com/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="https://xxgblog.com/tags/Spring-Cloud/"/>
    
      <category term="Eureka" scheme="https://xxgblog.com/tags/Eureka/"/>
    
      <category term="微服务" scheme="https://xxgblog.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data Redis 如何将 RedisTemplate 注入为 ListOperations 类型</title>
    <link href="https://xxgblog.com/2020/03/12/spring-redistemplate-listoperations/"/>
    <id>https://xxgblog.com/2020/03/12/spring-redistemplate-listoperations/</id>
    <published>2020-03-12T03:14:16.000Z</published>
    <updated>2020-03-12T10:08:22.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 Spring Data Redis 官方文档中，可以看到这样一个常规用法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span> <span class="attr">p:use-pool</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- redis template definition --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span> <span class="attr">p:connection-factory-ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// inject the actual template</span></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; template;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// inject the template as ListOperations</span></span><br><span class="line">  <span class="meta">@Resource</span>(name=<span class="string">"redisTemplate"</span>)</span><br><span class="line">  <span class="keyword">private</span> ListOperations&lt;String, String&gt; listOps;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLink</span><span class="params">(String userId, URL url)</span> </span>&#123;</span><br><span class="line">    listOps.leftPush(userId, url.toExternalForm());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码摘自：<a href="https://docs.spring.io/spring-data/redis/docs/2.2.5.RELEASE/reference/html/#redis:template" target="_blank" rel="noopener">https://docs.spring.io/spring-data/redis/docs/2.2.5.RELEASE/reference/html/#redis:template</a></p><p><code>RedisTemplate</code> 和 <code>ListOperations</code> 并没有继承关系，这里是怎么将 <code>RedisTemplate</code> 注入到 <code>ListOperations</code> 类型上去的呢？而且不但可以将 <code>RedisTemplate</code> 注入到 <code>ListOperations</code> ，也可以注入到 <code>ValueOperations</code>、<code>SetOperations</code>、<code>ZSetOperations</code>、<code>HashOperations</code> 等类型上。</p><h2 id="PropertyEditor"><a href="#PropertyEditor" class="headerlink" title="PropertyEditor"></a>PropertyEditor</h2><p>Spring 框架可以通过 <code>java.beans.PropertyEditor</code> 接口的实现类来实现类型转换。</p><p>Spring Data Redis 提供了 <code>ListOperationsEditor</code> 可以将 <code>RedisTemplate</code> 转为 <code>ListOperations</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListOperationsEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> RedisOperations) &#123;</span><br><span class="line"><span class="keyword">super</span>.setValue(((RedisOperations) value).opsForList());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Editor supports only conversion of type "</span> + RedisOperations.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码摘自：<a href="https://github.com/spring-projects/spring-data-redis/blob/2.2.5.RELEASE/src/main/java/org/springframework/data/redis/core/ListOperationsEditor.java" target="_blank" rel="noopener">https://github.com/spring-projects/spring-data-redis/blob/2.2.5.RELEASE/src/main/java/org/springframework/data/redis/core/ListOperationsEditor.java</a></p><p>以上代码中，<code>RedisOperations</code> 是 <code>RedisTemplate</code> 的父级接口，<code>((RedisOperations) value).opsForList()</code> 实际上就是调用 <code>RedisTemplate.opsForList()</code> 获取 <code>ListOperations</code>。</p><h2 id="Spring-如何注册-PropertyEditor"><a href="#Spring-如何注册-PropertyEditor" class="headerlink" title="Spring 如何注册 PropertyEditor"></a>Spring 如何注册 PropertyEditor</h2><blockquote><p>Note also that the standard JavaBeans infrastructure automatically discovers PropertyEditor classes (without you having to register them explicitly) if they are in the same package as the class they handle and have the same name as that class, with Editor appended. For example, one could have the following class and package structure, which would be sufficient for the SomethingEditor class to be recognized and used as the PropertyEditor for Something-typed properties.</p></blockquote><p>摘自：<a href="https://docs.spring.io/spring/docs/5.2.4.RELEASE/spring-framework-reference/core.html#beans-beans-conversion" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.4.RELEASE/spring-framework-reference/core.html#beans-beans-conversion</a></p><p>文档中提到，如果 <code>PropertyEditor</code> 类与它们处理的类在同一个包中，并且类名再加上 <code>Editor</code> 后缀，则无需显式注册，该 <code>PropertyEditor</code> 可以被自动发现。</p><p>在 Spring Data Redis 源码中可以看到，<code>ListOperations</code> 类和 <code>ListOperationsEditor</code> 都在 <code>org.springframework.data.redis.core</code> 包下，且 <code>ListOperationsEditor</code> 符合命名规则，即在 <code>ListOperations</code> 类名上加上 <code>Editor</code> 后缀，所以可以自动发现并生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在 Spring Data Redis 官方文档中，可以看到这样一个常规用法：&lt;/p&gt;
&lt;figure class=&quot;highlight x
      
    
    </summary>
    
      <category term="Spring Framework" scheme="https://xxgblog.com/categories/Spring-Framework/"/>
    
    
      <category term="Spring Data" scheme="https://xxgblog.com/tags/Spring-Data/"/>
    
      <category term="Redis" scheme="https://xxgblog.com/tags/Redis/"/>
    
      <category term="PropertyEditor" scheme="https://xxgblog.com/tags/PropertyEditor/"/>
    
      <category term="RedisTemplate" scheme="https://xxgblog.com/tags/RedisTemplate/"/>
    
      <category term="Operations" scheme="https://xxgblog.com/tags/Operations/"/>
    
  </entry>
  
  <entry>
    <title>Nginx失败重试中的HTTP协议幂等问题: non_idempotent</title>
    <link href="https://xxgblog.com/2019/04/19/nginx-non-idempotent/"/>
    <id>https://xxgblog.com/2019/04/19/nginx-non-idempotent/</id>
    <published>2019-04-19T14:18:36.000Z</published>
    <updated>2019-04-20T16:47:38.938Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx通过反向代理做负载均衡时，如果被代理的其中一个服务发生错误或者超时的时候，通常希望Nginx自动重试其他的服务，从而实现服务的高可用性。实际上Nginx本身默认会有错误重试机制，并且可以通过<code>proxy_next_upstream</code>来自定义配置。</p><p>如果不了解HTTP协议以及Nginx的机制，就可能在使用过程中遇到各种各样的坑。例如服务出现了错误或超时却未重试，或者一些例如创建订单或发送短信这类的HTTP接口，客户端只发送一次请求，后台却由于Nginx重试导致创建了多个订单，或者收到多条短信，导致一些业务上的问题。</p><h2 id="proxy-next-upstream"><a href="#proxy-next-upstream" class="headerlink" title="proxy_next_upstream"></a>proxy_next_upstream</h2><p>在Nginx配置文件中，<code>proxy_next_upstream</code>用于指定在什么情况下Nginx会将请求转移到其他服务器上。其默认值是<code>proxy_next_upstream error timeout</code>，即发生网络错误以及超时，才会重试其他服务器。默认情况下服务返回500状态码是不会重试的，如果想在响应500状态码时也进行重试，可以配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_next_upstream error timeout http_500;</span><br></pre></td></tr></table></figure></p><p>当然还有<code>http_502</code>、<code>http_503</code>、<code>http_404</code>等可以指定在出现哪些状态码的情况下需要重试。具体配置项可以参考官方文档: <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream</a> 。</p><p>用一个最简单的例子来测试一下该特性，例如下面是Spring Boot写了一个简单的HTTP接口，返回500状态码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NginxRetryApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(NginxRetryApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"收到一个请求"</span>); <span class="comment">// 打印日志</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(); <span class="comment">// 抛出异常, 返回500状态码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分别使用9030和9031两个端口号启动该Spring Boot服务，然后Nginx配置好负载均衡：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream nginxretry &#123;</span><br><span class="line">    server 127.0.0.1:9030 max_fails=0;</span><br><span class="line">server 127.0.0.1:9031 max_fails=0;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 9039;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://nginxretry;</span><br><span class="line">        proxy_next_upstream error timeout http_500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：以上配置中<code>max_fails=0</code>是为了更方便的测试Nginx错误重试机制。<code>max_fails</code>默认值是1，用于指定一个server在一段时间内（默认10s）发生错误次数达到多少次，Nginx就会自动将该服务器下线。这里设置为0是禁用这个特性，防止在测试过程中服务器被踢下线不好测试。线上环境下一般不会设置<code>max_fails=0</code>。</p><p>配置完成后重启Nginx，使用GET方式请求 <a href="http://localhost:9039/" target="_blank" rel="noopener">http://localhost:9039/</a> ，再分别查看9030和9031两个端口号对应的服务日志，可以发现两个服务都收到请求，也就是Nginx在访问其中一个服务收到500错误状态码后，又尝试去访问另一个服务。</p><p>再次使用POST方式请求 <a href="http://localhost:9039/" target="_blank" rel="noopener">http://localhost:9039/</a> ，再分别查看9030和9031两个端口号对应的服务日志，可以发现只有一个服务收到请求。也就是<strong>当请求类型是POST时，Nginx默认不会失败重试</strong>。如果想让POST请求也会失败重试，可以继续向下阅读。</p><h2 id="non-idempotent"><a href="#non-idempotent" class="headerlink" title="non_idempotent"></a>non_idempotent</h2><p>在<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream" target="_blank" rel="noopener">Nginx文档</a>中可以看到<code>proxy_next_upstream</code>有一个选项<code>non_idempotent</code>:</p><blockquote><p>normally, requests with a non-idempotent method (POST, LOCK, PATCH) are not passed to the next server if a request has been sent to an upstream server (1.9.13); enabling this option explicitly allows retrying such requests;</p></blockquote><p>通常情况下，如果请求使用非等幂方法（POST、LOCK、PATCH），请求失败后不会再到其他服务器进行重试。加上<code>non_idempotent</code>选项后，即使是非幂等请求类型（例如POST请求），发生错误后也会重试。</p><p>如果想让POST请求也会失败重试，需要配置<code>non_idempotent</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream nginxretry &#123;</span><br><span class="line">    server 127.0.0.1:9030 max_fails=0;</span><br><span class="line">server 127.0.0.1:9031 max_fails=0;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 9039;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://nginxretry;</span><br><span class="line">        proxy_next_upstream error timeout http_500 non_idempotent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启Nginx后再次使用POST请求访问 <a href="http://localhost:9039/" target="_blank" rel="noopener">http://localhost:9039/</a> ，再分别查看9030和9031两个端口号对应的服务日志，可以看到两个服务都收到请求，也就是POST请求也会重试了。不过实际上在生产环境中，不建议加上<code>non_idempotent</code>选项，具体原因可以继续往下阅读。</p><h2 id="什么是幂等方法"><a href="#什么是幂等方法" class="headerlink" title="什么是幂等方法"></a>什么是幂等方法</h2><p>在<a href="https://tools.ietf.org/html/rfc7231#section-4.2.2" target="_blank" rel="noopener">HTTP协议规范</a>中，对幂等方法（Idempotent Method）做了以下定义：</p><blockquote><p> A request method is considered “idempotent” if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request.</p></blockquote><p>如果使用该方法的多个相同请求对服务器的预期效果与单个请求的效果相同，则认为请求方法是幂等的。常见的HTTP请求方法中，GET是幂等的，而POST是非幂等的。如果在回答面试题”GET和POST区别”时能答出这一点，才能说明对HTTP协议有一定的理解。</p><p>在做业务开发是如何理解幂等性，举个最简单的例子：GET方法一般用于获取数据，如果获取的是数据库数据，对应的是SELECT语句。同样的SELECT语句执行一次还是多次，都不会影响数据。而POST一般对应INSERT，如果执行多次后，可能会造成数据重复插入的问题。所以不要使用GET方法做一些INSERT操作，在业务开发时要遵循HTTP协议规范。</p><p>生产环境中为什么不建议加上<code>non_idempotent</code>选项？因为无论是发生500错误还是timeout，服务器上的业务可能都已经执行过了，而重试会导致非幂等方法重复执行，从而导致业务问题，例如一个请求会创建了多个订单，或者收到多条短信的问题。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream</a></li><li><a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7231</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx通过反向代理做负载均衡时，如果被代理的其中一个服务发生错误或者超时的时候，通常希望Nginx自动重试其他的服务，从而实现服务的高可用性。实际上Nginx本身默认会有错误重试机制，并且可以通过&lt;code&gt;proxy_next_upstream&lt;/code&gt;来自定义配
      
    
    </summary>
    
      <category term="Nginx" scheme="https://xxgblog.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://xxgblog.com/tags/Nginx/"/>
    
      <category term="HTTP" scheme="https://xxgblog.com/tags/HTTP/"/>
    
      <category term="反向代理" scheme="https://xxgblog.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="负载均衡" scheme="https://xxgblog.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java IPv6相关属性preferIPv4Stack、preferIPv6Addresses介绍</title>
    <link href="https://xxgblog.com/2019/02/17/java-ipv6-system-properties/"/>
    <id>https://xxgblog.com/2019/02/17/java-ipv6-system-properties/</id>
    <published>2019-02-17T03:14:16.000Z</published>
    <updated>2019-02-17T17:18:46.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPv6背景介绍"><a href="#IPv6背景介绍" class="headerlink" title="IPv6背景介绍"></a>IPv6背景介绍</h2><p>目前被广泛使用的IPv4，它的最大问题是网络地址资源有限。IPv4仅有32二进制位，满打满算也仅有不到43亿个IP地址，已经完全不能满足目前需求。IPv6有128二进制位，地址数量非常庞大。目前主流操作系统早已支持IPv6，Google、Facebook和Yahoo等网站也早已支持IPv6。2017年底中共中央办公厅、国务院办公厅印发<a href="http://www.gov.cn/zhengce/2017-11/26/content_5242389.htm" target="_blank" rel="noopener">《推进互联网协议第六版（IPv6）规模部署行动计划》</a>，推动国内IPv6的支持。目前已有大量国内网站和APP已经支持IPv6。未来数年将是IPv4到IPv6的过渡时期，IPv6和IPv4会并存，IPv6使用率也会逐渐提高。</p><h2 id="Java对IPv6的支持"><a href="#Java对IPv6的支持" class="headerlink" title="Java对IPv6的支持"></a>Java对IPv6的支持</h2><p>在<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/ipv6_guide/index.html" target="_blank" rel="noopener">Networking IPv6 User Guide</a>文档中，介绍了Java对IPv6的支持情况：</p><blockquote><p>IPv6 in Java is transparent and automatic. Porting is not necessary; there is no need to recompile source files.</p></blockquote><p>Java中对IPv6的支持是透明的且自动化的，无需移植，也无需重新编译源码。相对于其他语言而言（例如C++），Java很好封装了IPv4和IPv6两种版本的不同，Java一般不需要在编写代码时关注IPv6如何支持，一个原本运行在IPv4环境的代码放到支持IPv6环境中一般也可以直接使用。</p><h2 id="Java-IPv6相关系统属性"><a href="#Java-IPv6相关系统属性" class="headerlink" title="Java IPv6相关系统属性"></a>Java IPv6相关系统属性</h2><p>由于Java封装了IPv4和IPv6的差异，在代码层面上不需要关注同时也无法设置使用IPv4还是IPv6，Java提供了<code>java.net.preferIPv4Stack</code>、<code>java.net.preferIPv6Addresses</code>两个系统属性，用于设置协议栈和地址族的选择。</p><p>这两个系统参数既可以在Java代码中设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"java.net.preferIPv4Stack"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure></p><p>也可以在启动时通过JVM参数设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djava.net.preferIPv4Stack=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="java-net-preferIPv4Stack（默认值false）"><a href="#java-net-preferIPv4Stack（默认值false）" class="headerlink" title="java.net.preferIPv4Stack（默认值false）"></a>java.net.preferIPv4Stack（默认值false）</h3><p>官方文档解释：</p><blockquote><p>If IPv6 is available on the operating system, the underlying native socket will be an IPv6 socket. This allows Java applications to connect to, and accept connections from, both IPv4 and IPv6 hosts.</p></blockquote><p>当<code>java.net.preferIPv4Stack</code>为默认值false时，在支持IPv6的双栈系统上，使用Java的Socket会默认通过底层native方法创建一个IPv6 Socket，这个IPv6 Socket可以同时支持和IPv4或IPv6主机通信。如果设置为true，Java程序将无法使用IPv6进行网络通信，也就是仅支持IPv4。</p><p>例如，当TCP客户端<code>java.net.preferIPv4Stack</code>设置为true时，如果想创建一个host为IPv6的Socket，会抛出异常<code>java.net.SocketException: Protocol family unavailable</code>，设置为false时则程序可以正常运行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"java.net.preferIPv4Stack"</span>, <span class="string">"true"</span>);</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"::1"</span>, <span class="number">80</span>); <span class="comment">// 访问IPv6地址::1（相当于IPv4的127.0.0.1）的80端口会抛出异常</span></span><br></pre></td></tr></table></figure></p><p>当TCP服务器<code>java.net.preferIPv4Stack</code>设置为true时，通过IPv6访问就会访问不通。</p><p>在正常情况下，Tomcat或者Jetty等Java服务器启动后，可以使用浏览器通过IPv4地址<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a>或IPv6地址<a href="http://[::1]:8080" target="_blank" rel="noopener">http://[::1]:8080</a>两种方式访问，此时通过<code>lsof -i:8080</code>命令可以看到对应进程的Type为IPv6：<br><img src="/img/c3c91a63-6a81-410d-8ede-6904aa0d7d6c.jpg" alt="lsof命令"></p><p>如果加上JVM参数<code>-Djava.net.preferIPv4Stack=true</code>启动，此时通过<code>lsof -i:8080</code>命令可以看到对应进程的Type为IPv4：<br><img src="/img/f17a9d70-80a4-11e6-ae22-56b6b6499688.jpg" alt="lsof命令"><br>此时通过IPv6地址<a href="http://[::1]:8080" target="_blank" rel="noopener">http://[::1]:8080</a>将无法访问，仅可通过IPv4地址<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a>访问。</p><h3 id="java-net-preferIPv6Addresses（默认值false）"><a href="#java-net-preferIPv6Addresses（默认值false）" class="headerlink" title="java.net.preferIPv6Addresses（默认值false）"></a>java.net.preferIPv6Addresses（默认值false）</h3><p>官方文档解释：</p><blockquote><p>By default, IPv4 addresses are preferred over IPv6 addresses, for example, when querying the name service (for instance, DNS service), IPv4 addresses would be returned ahead of IPv6 addresses. </p></blockquote><p>当<code>java.net.preferIPv6Addresses</code>为默认值false时，IPv4地址会优先使用，例如在DNS通过域名查询IP地址时，会优先使用IPv4地址，反之设为true，则会优先使用IPv6地址。</p><p>Google目前支持IPv4和IPv6，可以<code>host</code>命令查看域名<code>www.google.com</code>DNS解析的IPv4和IPv6地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host www.google.com</span><br><span class="line">&gt; www.google.com has address 66.220.146.94</span><br><span class="line">&gt; www.google.com has IPv6 address 2404:6800:4008:803::2004</span><br></pre></td></tr></table></figure></p><p>默认情况下会优先使用IPv4地址：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(InetAddress.getByName(<span class="string">"www.google.com"</span>));</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.google.com/66.220.146.94</span><br></pre></td></tr></table></figure></p><p>当<code>java.net.preferIPv6Addresses</code>设置为true时会优先使用IPv6地址：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"java.net.preferIPv6Addresses"</span>, <span class="string">"true"</span>);</span><br><span class="line">System.out.println(InetAddress.getByName(<span class="string">"www.google.com"</span>));</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.google.com/2404:6800:4008:803:0:0:0:2004</span><br></pre></td></tr></table></figure></p><p>另外，通过<code>InetAddress.getLocalHost()</code>方法返回本机IP地址，最终返回的是IPv4还是IPv6地址，也会由<code>java.net.preferIPv6Addresses</code>的值来决定。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/ipv6_guide/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/net/ipv6_guide/index.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IPv6背景介绍&quot;&gt;&lt;a href=&quot;#IPv6背景介绍&quot; class=&quot;headerlink&quot; title=&quot;IPv6背景介绍&quot;&gt;&lt;/a&gt;IPv6背景介绍&lt;/h2&gt;&lt;p&gt;目前被广泛使用的IPv4，它的最大问题是网络地址资源有限。IPv4仅有32二进制位，满打满算
      
    
    </summary>
    
      <category term="Java" scheme="https://xxgblog.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="IPv6" scheme="https://xxgblog.com/tags/IPv6/"/>
    
  </entry>
  
  <entry>
    <title>利用X-Forwarded-For伪造客户端IP漏洞成因及防范</title>
    <link href="https://xxgblog.com/2018/10/12/x-forwarded-for-header-trick/"/>
    <id>https://xxgblog.com/2018/10/12/x-forwarded-for-header-trick/</id>
    <published>2018-10-12T03:14:16.000Z</published>
    <updated>2019-05-14T16:43:04.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在Web应用开发中，经常会需要获取客户端IP地址。一个典型的例子就是投票系统，为了防止刷票，需要限制每个IP地址只能投票一次。</p><h2 id="如何获取客户端IP"><a href="#如何获取客户端IP" class="headerlink" title="如何获取客户端IP"></a>如何获取客户端IP</h2><p>在Java中，获取客户端IP最直接的方式就是使用<code>request.getRemoteAddr()</code>。这种方式能获取到连接服务器的客户端IP，在中间没有代理的情况下，的确是最简单有效的方式。但是目前互联网Web应用很少会将应用服务器直接对外提供服务，一般都会有一层Nginx做反向代理和负载均衡，有的甚至可能有多层代理。在有反向代理的情况下，直接使用<code>request.getRemoteAddr()</code>获取到的IP地址是Nginx所在服务器的IP地址，而不是客户端的IP。</p><p>HTTP协议是基于TCP协议的，由于<code>request.getRemoteAddr()</code>默认获取到的是TCP层直接连接的客户端的IP，对于Web应用服务器来说直接连接它的客户端实际上是Nginx，也就是TCP层是拿不到真实客户端的IP。</p><p>为了解决上面的问题，很多HTTP代理会在HTTP协议头中添加<code>X-Forwarded-For</code>头，用来追踪请求的来源。<code>X-Forwarded-For</code>的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: client1, proxy1, proxy2</span><br></pre></td></tr></table></figure></p><p><code>X-Forwarded-For</code>包含多个IP地址，每个值通过逗号+空格分开，最左边（client1）是最原始客户端的IP地址，中间如果有多层代理，每一层代理会将连接它的客户端IP追加在<code>X-Forwarded-For</code>右边。</p><p>下面就是一种常用的获取客户端真实IP的方法，首先从HTTP头中获取<code>X-Forwarded-For</code>，如果<code>X-Forwarded-For</code>头存在就按逗号分隔取最左边第一个IP地址，不存在直接通过<code>request.getRemoteAddr()</code>获取IP地址：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getClientIp</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String xff = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">    <span class="keyword">if</span> (xff == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xff.contains(<span class="string">","</span>) ? xff.split(<span class="string">","</span>)[<span class="number">0</span>] : xff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，要让Nginx支持<code>X-Forwarded-For</code>头，需要配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure></p><p><code>$proxy_add_x_forwarded_for</code>会将和Nginx直接连接的客户端IP追加在请求原有<code>X-Forwarded-For</code>值的右边。</p><h2 id="伪造X-Forwarded-For"><a href="#伪造X-Forwarded-For" class="headerlink" title="伪造X-Forwarded-For"></a>伪造X-Forwarded-For</h2><p>一般的客户端（例如浏览器）发送HTTP请求是没有<code>X-Forwarded-For</code>头的，当请求到达第一个代理服务器时，代理服务器会加上<code>X-Forwarded-For</code>请求头，并将值设为客户端的IP地址（也就是最左边第一个值），后面如果还有多个代理，会依次将IP追加到<code>X-Forwarded-For</code>头最右边，最终请求到达Web应用服务器，应用通过获取<code>X-Forwarded-For</code>头取左边第一个IP即为客户端真实IP。</p><p>但是如果客户端在发起请求时，请求头上带上一个伪造的<code>X-Forwarded-For</code>，由于后续每层代理只会追加而不会覆盖，那么最终到达应用服务器时，获取的左边第一个IP地址将会是客户端伪造的IP。也就是上面的Java代码中<code>getClientIp()</code>方法获取的IP地址很有可能是伪造的IP地址，如果一个投票系统用这种方式做的IP限制，那么很容易会被刷票。</p><p>伪造<code>X-Forwarded-For</code>头的方法很简单，例如Postman就可以轻松做到：<br><img src="/img/38165b59-6e62-430f-8b35-4b17540be135.png" alt="Postman伪造X-Forwarded-For"></p><p>当然你也可以写一段刷票程序或者脚本，每次请求时添加<code>X-Forwarded-For</code>头并随机生成一个IP来实现刷票的目的。</p><h2 id="如何防范"><a href="#如何防范" class="headerlink" title="如何防范"></a>如何防范</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在直接对外的Nginx反向代理服务器上配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For $remote_addr;</span><br></pre></td></tr></table></figure></p><p>如果有多层Nginx代理，内层的Nginx配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure></p><p>在最外层Nginx（即直接对外提供服务的Nginx）使用<code>$remote_addr</code>代替上面的<code>$proxy_add_x_forwarded_for</code>，可以防止伪造<code>X-Forwarded-For</code>。<code>$proxy_add_x_forwarded_for</code>会在原有<code>X-Forwarded-For</code>上追加IP，这就相当于给了伪造<code>X-Forwarded-For</code>的机会。而<code>$remote_addr</code>是获取的是直接TCP连接的客户端IP，这个是无法伪造的，即使客户端伪造也会被覆盖掉，而不是追加。</p><p>需要注意的是，如果有多层代理，只在直接对外访问的Nginx上配置<code>X-Forwarded-For</code>为<code>$remote_addr</code>，内层的Nginx还是要配置为<code>$proxy_add_x_forwarded_for</code>，不然内层的Nginx又会覆盖掉客户端的真实IP。</p><p>完成以上配置后，业务代码中再通过上面的<code>getClientIp()</code>方法，获取<code>X-Forwarded-For</code>最左边的IP地址即为真实的客户端地址，且客户端也无法伪造。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>Tomcat服务器解决方案：<a href="https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html" target="_blank" rel="noopener">org.apache.catalina.valves.RemoteIpValve</a></p><p><code>RemoteIpValve</code>可以替换Servlet API中<code>request.getRemoteAddr()</code>方法的实现，让<code>request.getRemoteAddr()</code>方法从<code>X-Forwarded-For</code>头中获取IP地址。也就是在业务代码中不需要再自己实现类似于上面的<code>getClientIp()</code>方法来从<code>X-Forwarded-For</code>中获取IP，而是直接使用<code>request.getRemoteAddr()</code>方法。想要使用<code>RemoteIpValve</code>，仅需要在Tomcat配置文件server.xml中Host元素内末尾加上：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span> <span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>RemoteIpValve</code>有一套防止伪造<code>X-Forwarded-For</code>的机制，实现思路：遍历<code>X-Forwarded-For</code>头中的IP地址，和方法一不同的是，不是直接取左边第一个IP，而是从右向左遍历。遍历时可以根据正则表达式剔除掉内网IP和已知的代理服务器本身的IP（例如192.168开头的IP），那么拿到的第一个非剔除IP就会是一个可信任的客户端IP。这种方法的巧妙之处在于，即使伪造<code>X-Forwarded-For</code>，那么请求到达应用服务器时，伪造的IP也会在<code>X-Forwarded-For</code>值的左边，真实的IP为放到右边的某个位置，从右向左遍历就可以避免取到这些伪造的IP地址。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>Node.js 框架 Egg.js 的解决方案：<a href="https://eggjs.org/zh-cn/tutorials/proxy.html" target="_blank" rel="noopener">https://eggjs.org/zh-cn/tutorials/proxy.html</a></p><p>Egg.js 可通过设置<code>maxProxyCount</code>指定代理层数，然后取<code>X-Forwarded-For</code>头中从右往左数第<code>maxProxyCount</code>个IP即为真实 IP 地址，如果有伪造 IP 地址了必然在最左边，就会被忽略掉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在Web应用开发中，经常会需要获取客户端IP地址。一个典型的例子就是投票系统，为了防止刷票，需要限制每个IP地址只能投票一次
      
    
    </summary>
    
      <category term="Nginx" scheme="https://xxgblog.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://xxgblog.com/tags/Nginx/"/>
    
      <category term="Http" scheme="https://xxgblog.com/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Apache Commons DbUtils整合Spring框架实现简单的CRUD</title>
    <link href="https://xxgblog.com/2018/08/30/dbutils-spring/"/>
    <id>https://xxgblog.com/2018/08/30/dbutils-spring/</id>
    <published>2018-08-30T03:14:16.000Z</published>
    <updated>2019-04-09T12:08:02.576Z</updated>
    
    <content type="html"><![CDATA[<p>Commons DbUtils是Apache提供的一个对JDBC进行简单封装的开源工具类库，能够简化JDBC相关的开发。Commons DbUtils可以非常方便的整合Spring Framework，比较轻量级，执行SQL语句非常方便（特别是查询语句），可以代替Spring JdbcTemplate、MyBatis等数据库访问层技术。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>DbUtils通过<code>QueryRunner</code>类来执行SQL，使用起来非常类似于Spring框架中的<code>JdbcTemplate</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.zaxxer.hikari.HikariDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test_db"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xxx"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我这里使用的连接池是HikariCP，这里可以根据需要换成其他的连接池，例如DBCP、Druid等。</p><p>由于DbUtils本身不支持Spring事务，如果想要支持事务，例如<code>@Transactional</code>注解，还需要给DataSource加一层代理：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zaxxer.hikari.HikariDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test_db"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xxx"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Java代码中可以通过Autowired引入QueryRunner：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><p>增删改操作，也就是INSERT、DELETE、UPDATE语句，都可以通过QueryRunner的execute方法来直接执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryRunner.execute(<span class="string">"delete from user_info"</span>);</span><br><span class="line">queryRunner.execute(<span class="string">"update user_info set user_name=?,user_age=? where user_id=?"</span>, <span class="string">"xxg"</span>, <span class="number">28</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></p><p>由于DbUtils本身也是基于JDBC中的PreparedStatement来实现的，所以也是支持SQL中带有参数的。</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="ResultSetHandler"><a href="#ResultSetHandler" class="headerlink" title="ResultSetHandler"></a>ResultSetHandler</h3><p><code>ResultSetHandler</code>是DbUtils中的一个接口，该接口的实现类可用于将JDBC查询语句返回的结果（也就是<code>ResultSet</code>），转成你想要的数据类型。这个和Spring JdbcTemplate查询时用到的<code>RowMapper</code>接口非常类似。</p><p>下面写了一个<code>ResultSetHandler</code>实现类，将一条SQL的查询结果转为一个List<user>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; list = queryRunner.query(<span class="string">"select * from user_info limit 100"</span>, <span class="keyword">new</span> ResultSetHandler&lt;List&lt;User&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        List&lt;User&gt; l = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUserId(rs.getInt(<span class="string">"user_id"</span>));</span><br><span class="line">            user.setUserName(rs.getString(<span class="string">"user_name"</span>));</span><br><span class="line">            user.setCreateTime(rs.getTimestamp(<span class="string">"create_time"</span>));</span><br><span class="line">            l.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></user></p><p>由于<code>ResultSetHandler</code>接口中只有一个抽象方法，所以如果是Java 8版本的话也可以使用Lambda表达式来简化代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; list = queryRunner.query(<span class="string">"select * from user_info limit 100"</span>, rs -&gt; &#123;</span><br><span class="line">    List&lt;User&gt; l = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserId(rs.getInt(<span class="string">"user_id"</span>));</span><br><span class="line">        user.setUserName(rs.getString(<span class="string">"user_name"</span>));</span><br><span class="line">        user.setCreateTime(rs.getTimestamp(<span class="string">"create_time"</span>));</span><br><span class="line">        l.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="常用ResultSetHandler实现类"><a href="#常用ResultSetHandler实现类" class="headerlink" title="常用ResultSetHandler实现类"></a>常用ResultSetHandler实现类</h3><p>DbUtils提供了一些常用的<code>ResultSetHandler</code>实现类，可以简化查询，一般情况下不需要像上面那样自己来实现<code>ResultSetHandler</code>接口。</p><h4 id="ScalarHandler"><a href="#ScalarHandler" class="headerlink" title="ScalarHandler"></a>ScalarHandler</h4><p>用于返回查询结果第一行第一列数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = queryRunner.query(<span class="string">"select count(*) from user_info"</span>, <span class="keyword">new</span> ScalarHandler&lt;Long&gt;()); <span class="comment">// 查询count</span></span><br><span class="line">String userName = queryRunner.query(<span class="string">"select user_name from user_info where user_id=?"</span>, <span class="keyword">new</span> ScalarHandler&lt;String&gt;(), <span class="number">1</span>); <span class="comment">// 查询user_id=1的用户的用户名</span></span><br></pre></td></tr></table></figure></p><h4 id="ColumnListHandler"><a href="#ColumnListHandler" class="headerlink" title="ColumnListHandler"></a>ColumnListHandler</h4><p>返回查询结果（所有行）第一列的数据List：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; userNameList = queryRunner.query(<span class="string">"select user_name from user_info"</span>, <span class="keyword">new</span> ColumnListHandler&lt;String&gt;()); <span class="comment">// 查询所有用户的user_name</span></span><br></pre></td></tr></table></figure></p><h4 id="MapHandler"><a href="#MapHandler" class="headerlink" title="MapHandler"></a>MapHandler</h4><p>返回查询结果第一行数据（所有列）并组装成Map，Map的key为列名，value为值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; userInfo = queryRunner.query(<span class="string">"select user_id,user_name from user_info where user_id=1"</span>, <span class="keyword">new</span> MapHandler());</span><br><span class="line"><span class="keyword">long</span> userId = (Long) userInfo.get(<span class="string">"user_id"</span>);</span><br><span class="line">String userName = (String) userInfo.get(<span class="string">"user_name"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="MapListHandler"><a href="#MapListHandler" class="headerlink" title="MapListHandler"></a>MapListHandler</h4><p>和<code>MapHandler</code>机制类似，<code>MapListHandler</code>会将ResultSet转成一个<code>List&lt;Map&lt;String, Object&gt;&gt;</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; dataList = queryRunner.query(<span class="string">"select user_id,user_name from user_info"</span>, <span class="keyword">new</span> MapListHandler());</span><br></pre></td></tr></table></figure></p><h4 id="ArrayHandler"><a href="#ArrayHandler" class="headerlink" title="ArrayHandler"></a>ArrayHandler</h4><p>返回查询结果第一行数据，将所有列值按顺序组成一个数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object[] data = queryRunner.query(<span class="string">"select user_id,user_name from user_info where user_id=1"</span>, <span class="keyword">new</span> ArrayHandler());</span><br><span class="line"><span class="keyword">long</span> userId = (Long) data[<span class="number">0</span>];</span><br><span class="line">String userName = (String) data[<span class="number">1</span>];</span><br></pre></td></tr></table></figure></p><h4 id="ArrayListHandler"><a href="#ArrayListHandler" class="headerlink" title="ArrayListHandler"></a>ArrayListHandler</h4><p>和<code>ArrayHandler</code>机制类似，<code>ArrayListHandler</code>会将ResultSet转成一个<code>List&lt;Object[]&gt;</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object[]&gt; list = queryRunner.query(<span class="string">"select user_id,user_name from user_info"</span>, <span class="keyword">new</span> ArrayListHandler());</span><br></pre></td></tr></table></figure></p><h4 id="KeyedHandler"><a href="#KeyedHandler" class="headerlink" title="KeyedHandler"></a>KeyedHandler</h4><p>将ResultSet转为<code>Map&lt;?, Map&lt;String, Object&gt;&gt;</code>，外层Map每个元素对应查询结果的一条数据，key为数据的主键或者唯一索引，value也是一个Map，内容是一行数据的列名和值，和<code>MapHandler</code>机制类似：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, Map&lt;String, Object&gt;&gt; dataMap = queryRunner.query(<span class="string">"select user_id,user_name from user_info"</span>, <span class="keyword">new</span> KeyedHandler&lt;Long&gt;(<span class="string">"user_id"</span>)); <span class="comment">// Key指定为user_id列</span></span><br><span class="line">Map&lt;String, Object&gt; data = dataMap.get(<span class="number">1L</span>); <span class="comment">// 获取user_id=1的一条记录</span></span><br><span class="line"><span class="keyword">long</span> userId = (Long) data.get(<span class="string">"user_id"</span>);</span><br><span class="line">String userName = (String) data.get(<span class="string">"user_name"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="BeanHandler"><a href="#BeanHandler" class="headerlink" title="BeanHandler"></a>BeanHandler</h4><p><code>BeanHandler</code>是比较实用的一个类，可以通过反射机制将查询结果第一行数据根据数据库列名映射到Java对象上，先定义一个Java对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userAge;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getter setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行查询：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询user_id=1的用户数据并返回User对象</span></span><br><span class="line">User user = queryRunner.query(<span class="string">"select user_id as userId,user_name as userName,user_age as userAge,create_time as createTime from user_info where user_id=1"</span>, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class));</span><br></pre></td></tr></table></figure></p><p>数据库列名很多人会使用下划线作为单词间分隔符，而Java命名规范要求变量名是驼峰命名，这样会导致无法直接映射，所以上面代码中在SQL语句上通过<code>AS</code>将列名下划线分隔符转成驼峰命名。但是如果字段比较多，或者想使用<code>select *</code>查询，上面的这种方法就不好使了。下面提供一种方案，可以将带有下划线分隔符的列名映射到驼峰命名的Java对象上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = queryRunner.query(<span class="string">"select user_id,user_name,user_age,create_time from user_info where user_id=1"</span>,</span><br><span class="line">        <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class, <span class="keyword">new</span> BasicRowProcessor(<span class="keyword">new</span> GenerousBeanProcessor())));</span><br></pre></td></tr></table></figure></p><h4 id="BeanListHandler"><a href="#BeanListHandler" class="headerlink" title="BeanListHandler"></a>BeanListHandler</h4><p>和<code>BeanHandler</code>机制类似，<code>BeanListHandler</code>可以将多条查询结果转为Java Bean的List：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = queryRunner.query(<span class="string">"select user_id as userId,user_name as userName,user_age as userAge,create_time as createTime from user_info"</span>,</span><br><span class="line">        <span class="keyword">new</span> BeanListHandler&lt;User&gt;(User.class));</span><br></pre></td></tr></table></figure></p><p>同样也可以将带有下划线分隔符的列名映射到驼峰命名的Java对象上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = queryRunner.query(<span class="string">"select user_id,user_name,user_age,create_time from user_info"</span>,</span><br><span class="line">        <span class="keyword">new</span> BeanListHandler&lt;User&gt;(User.class, <span class="keyword">new</span> BasicRowProcessor(<span class="keyword">new</span> GenerousBeanProcessor())));</span><br></pre></td></tr></table></figure></p><h4 id="BeanMapHandler"><a href="#BeanMapHandler" class="headerlink" title="BeanMapHandler"></a>BeanMapHandler</h4><p>类似于<code>KeyedHandler</code>机制，将ResultSet转为一个Map，Map中每条数据对应查询结果的一条数据，key为数据的主键或者唯一索引，value是数据通过反射机制转成的Java对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Long, User&gt; users = queryRunner.query(<span class="string">"select user_id as userId,user_name as userName,user_age as userAge,create_time as createTime from user_info"</span>,</span><br><span class="line">        <span class="keyword">new</span> BeanMapHandler&lt;Long, User&gt;(User.class, <span class="string">"userId"</span>)); <span class="comment">// 使用userId列作为Map的key</span></span><br><span class="line">User user1 = users.get(<span class="number">1L</span>); <span class="comment">// 获取user_id=1的用户</span></span><br></pre></td></tr></table></figure></p><p>同样也可以将带有下划线分隔符的列名映射到驼峰命名的Java对象上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map的key默认使用查询语句中的第一列（即主键user_id）</span></span><br><span class="line">Map&lt;Long, User&gt; users = queryRunner.query(<span class="string">"select user_id,user_name,user_age,create_time from user_info"</span>,</span><br><span class="line">        <span class="keyword">new</span> BeanMapHandler&lt;Long, User&gt;(User.class, <span class="keyword">new</span> BasicRowProcessor(<span class="keyword">new</span> GenerousBeanProcessor())));</span><br><span class="line">User user1 = users.get(<span class="number">1L</span>); <span class="comment">// 获取user_id=1的用户</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Commons DbUtils是Apache提供的一个对JDBC进行简单封装的开源工具类库，能够简化JDBC相关的开发。Commons DbUtils可以非常方便的整合Spring Framework，比较轻量级，执行SQL语句非常方便（特别是查询语句），可以代替Sprin
      
    
    </summary>
    
      <category term="Java" scheme="https://xxgblog.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Spring Framework" scheme="https://xxgblog.com/tags/Spring-Framework/"/>
    
  </entry>
  
  <entry>
    <title>去除Spring Security认证：Pre-Authentication配置</title>
    <link href="https://xxgblog.com/2018/05/22/spring-security-pre-authentication/"/>
    <id>https://xxgblog.com/2018/05/22/spring-security-pre-authentication/</id>
    <published>2018-05-22T03:14:16.000Z</published>
    <updated>2018-08-30T07:26:50.673Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Security官方文档对Pre-Authentication是这样解释的：</p><blockquote><p>There are situations where you want to use Spring Security for authorization, but the user has already been reliably authenticated by some external system prior to accessing the application. We refer to these situations as “pre-authenticated” scenarios.</p></blockquote><p>这里面涉及到Spring Security中两个概念，认证(Authentication)和授权(Authorization)。有关这两个概念的介绍，网上可以搜索到其他相关资料，这里仅通俗易懂的解释一下：</p><ul><li>认证(Authentication)：认证就是判断用户身份是否合法，例如用户名密码登录就是认证，如果一个用户拥有正确的密码，即可通过认证；</li><li>授权(Authorization)：用户认证通过了，但是每个用户的权限不同，判断用户有哪些权限以及是否有权限访问某些资源，就是授权。</li></ul><p>Spring Security框架提供了认证和授权的功能，但是有可能只希望使用Spring Security的授权功能，而不使用它提供的认证功能，比如使用一些其他认证方式，那么就可以使用Pre-Authentication。</p><h2 id="Pre-Authentication配置"><a href="#Pre-Authentication配置" class="headerlink" title="Pre-Authentication配置"></a>Pre-Authentication配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:security</span>=<span class="string">"http://www.springframework.org/schema/security"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/security</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/security/spring-security.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">entry-point-ref</span>=<span class="string">"http403ForbiddenEntryPoint"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 省略其他配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:custom-filter</span> <span class="attr">position</span>=<span class="string">"PRE_AUTH_FILTER"</span> <span class="attr">ref</span>=<span class="string">"preauthFilter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"http403ForbiddenEntryPoint"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"preauthFilter"</span> <span class="attr">class</span>=<span class="string">"com.xxg.test.auth.PreauthFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationManager"</span> <span class="attr">ref</span>=<span class="string">"authenticationManager"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"preauthAuthProvider"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preAuthenticatedUserDetailsService"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDetailsServiceWrapper"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDetailsService"</span> <span class="attr">ref</span>=<span class="string">"userDetailsService"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.xxg.test.auth.UserDetailsServiceImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-manager</span> <span class="attr">alias</span>=<span class="string">"authenticationManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">ref</span>=<span class="string">"preauthAuthProvider"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于不再使用Spring Security提供的默认的用户名密码登录认证，需要修改<code>entry-point-ref</code>为<code>Http403ForbiddenEntryPoint</code>，否则会出现异常：</p><p>No AuthenticationEntryPoint could be established. Please make sure you have a login mechanism configured through the namespace (such as form-login) or specify a custom AuthenticationEntryPoint with the ‘entry-point-ref’ attribute</p><p>配置Pre-Authentication的最主要的部分是需要添加一个<code>position=&quot;PRE_AUTH_FILTER&quot;</code>的Filter，这个Filter继承抽象类<code>AbstractPreAuthenticatedProcessingFilter</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreauthFilter</span> <span class="keyword">extends</span> <span class="title">AbstractPreAuthenticatedProcessingFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重写，返回用户名，这个用户名是经过其他方式认证过</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getPreAuthenticatedPrincipal</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (authenticated) &#123;</span><br><span class="line">            <span class="comment">// 可以通过request获取当前认证过的用户名，比如通过参数、HTTP请求头或者Cookie获取token，再通过token调用第三方接口获取用户名</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"your_username"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果认证失败，可以返回null，表示anonymous匿名用户</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这个方法一般情况下不需要重写，直接返回空字符串即可</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getPreAuthenticatedCredentials</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外还有个重点配置<code>userDetailsService</code>，这个是用于用户认证后的授权。这里需要一个<code>UserDetailsService</code>的实现类，来获取用户的所有权限。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里可以通过用户名获取对应的权限</span></span><br><span class="line">        Collection&lt;GrantedAuthority&gt; auths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        auths.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>));</span><br><span class="line">        auths.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_SUPER_ADMIN"</span>));</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(username, <span class="string">""</span>, auths);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>如果是普通的浏览器访问的Web，以上完成配置后，用户在浏览器上首次访问会调用<code>AbstractPreAuthenticatedProcessingFilter</code>的<code>getPreAuthenticatedPrincipal</code>以及<code>UserDetailsService</code>的<code>loadUserByUsername</code>方法来获取认证用户和授权，并将相关信息保存到Session中，后续的请求直接通过Session获取用户信息，不再重复调用这些方法。</p><p>而对于API接口来说，一般情况下不会使用Session来做会话控制，例如可能会通过token的方式。API接口相对来说每次接口访问都是无状态的，所以针对每次请求都需要重新认证和授权。这个时候可以设置<code>create-session=&quot;stateless&quot;</code>来禁掉Spring Security使用Session：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">entry-point-ref</span>=<span class="string">"http403ForbiddenEntryPoint"</span> <span class="attr">create-session</span>=<span class="string">"stateless"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 省略其他配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:custom-filter</span> <span class="attr">position</span>=<span class="string">"PRE_AUTH_FILTER"</span> <span class="attr">ref</span>=<span class="string">"preauthFilter"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/html/preauth.html" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/html/preauth.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Security官方文档对Pre-Authentication是这样解释的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are situations where you want to use Spring Security for authoriz
      
    
    </summary>
    
      <category term="Spring Framework" scheme="https://xxgblog.com/categories/Spring-Framework/"/>
    
    
      <category term="Spring Framework" scheme="https://xxgblog.com/tags/Spring-Framework/"/>
    
      <category term="Spring Security" scheme="https://xxgblog.com/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ整合Spring JMS</title>
    <link href="https://xxgblog.com/2018/05/12/spring-jms-activemq/"/>
    <id>https://xxgblog.com/2018/05/12/spring-jms-activemq/</id>
    <published>2018-05-12T03:14:16.000Z</published>
    <updated>2018-05-12T14:38:13.906Z</updated>
    
    <content type="html"><![CDATA[<p>JMS即Java消息服务（Java Message Service），是Java平台上的一套关于消息中间件的规范，或者说是一套统一的API。支持JMS的消息中间件有很多，ActiveMQ算是其中最常用的一个。</p><h2 id="JMS两种模型"><a href="#JMS两种模型" class="headerlink" title="JMS两种模型"></a>JMS两种模型</h2><p>JMS支持以下两种模型，本文将会对这两种模型分别介绍如何整合Spring：</p><ul><li>点对点（Point-to-Point），对应的destination是Queue</li><li>发布订阅（Publish/Subscribe），对应的destination是Topic</li></ul><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>无论是点对点还是发布订阅，生产者或者消费者，第一步是要获取连接。ActiveMQ提供了<code>org.apache.activemq.pool.PooledConnectionFactory</code>连接池，类似于常用的数据库连接池，用于管理和复用连接。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ActiveMQ连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span> <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://localhost:61616"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><p>Spring提供了JmsTemplate可以很方便的发送消息。</p><h3 id="点对点模型"><a href="#点对点模型" class="headerlink" title="点对点模型"></a>点对点模型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span> <span class="comment">&lt;!-- 指定Destination为Queue（点对点模型） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"testqueue"</span> /&gt;</span> <span class="comment">&lt;!-- Queue name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span> <span class="comment">&lt;!-- 指定Destination为Topic（发布订阅模型） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"testtopic"</span> /&gt;</span> <span class="comment">&lt;!-- Topic name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发送消息代码"><a href="#发送消息代码" class="headerlink" title="发送消息代码"></a>发送消息代码</h3><p>使用上面定义的JmsTemplate，通过JmsTemplate.send方法可以发送一条文本类型消息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String mesasage)</span> </span>&#123;</span><br><span class="line">    jmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> session.createTextMessage(mesasage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你正在使用Java 8，使用Lambda表达式发送消息会更加方便：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String mesasage)</span> </span>&#123;</span><br><span class="line">    jmsTemplate.send(session -&gt; session.createTextMessage(mesasage));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><p>JmsTemplate也可以作为消费者使用，但是它是同步的。下面介绍Spring JMS提供的异步的消费者方案。</p><h3 id="点对点模型-1"><a href="#点对点模型-1" class="headerlink" title="点对点模型"></a>点对点模型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消息监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span> <span class="comment">&lt;!-- 指定Destination为Queue（点对点模型） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"testqueue"</span> /&gt;</span> <span class="comment">&lt;!-- Queue name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xxg.jms.listener.ConsumerMessageListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发布订阅模型-1"><a href="#发布订阅模型-1" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消息监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span> <span class="comment">&lt;!-- 指定Destination为Topic（发布订阅模型） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"testtopic"</span> /&gt;</span> <span class="comment">&lt;!-- Topic name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xxg.jms.listener.ConsumerMessageListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发布订阅模型消息者持久订阅（Durable-Subscriber）"><a href="#发布订阅模型消息者持久订阅（Durable-Subscriber）" class="headerlink" title="发布订阅模型消息者持久订阅（Durable Subscriber）"></a>发布订阅模型消息者持久订阅（Durable Subscriber）</h3><p>上面给出的是非持久订阅的发布订阅模型消费者，这里来单独说一下持久订阅。需要注意的是，持久订阅（Durable Subscriber）并非消息持久化（DeliveryMode.PERSISTENT），这是两个不同的概念。</p><p>非持久订阅的消费者，如果消费者程序挂了，那么挂了的这段时间的消息是收不到的，即使再重启起来也收不到。持久订阅消费者可以让消费者在重启后任然能收到停止的这段时间的消息，避免遗漏。</p><p>要想使用持久订阅，需要给消费者设置一个唯一的client ID和Subscriber Name，这样可以让ActiveMQ记住这个消费者，当消费者断开连接程序停止，ActiveMQ也会给这个消费者保留这段时间内的消息，下次同一个消费者（client ID和Subscriber Name相同）重新连接上还能收到消息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ActiveMQ连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span> <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://localhost:61616"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"clientID"</span> <span class="attr">value</span>=<span class="string">"clientID_123456"</span> /&gt;</span>  <span class="comment">&lt;!-- 指定一个唯一的clientID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListener"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span> <span class="comment">&lt;!-- 指定Destination为Topic（发布订阅模型） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"testtopic"</span> /&gt;</span> <span class="comment">&lt;!-- Topic name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xxg.jms.listener.ConsumerMessageListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"durableSubscriptionName"</span> <span class="attr">value</span>=<span class="string">"durableSubscriptionName_123456"</span> /&gt;</span> <span class="comment">&lt;!-- 指定一个唯一的Name --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="接收消息代码"><a href="#接收消息代码" class="headerlink" title="接收消息代码"></a>接收消息代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(((TextMessage) message).getText());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (JMSException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must be of type TextMessage"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://activemq.apache.org/spring-support.html" target="_blank" rel="noopener">http://activemq.apache.org/spring-support.html</a></li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#jms" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#jms</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JMS即Java消息服务（Java Message Service），是Java平台上的一套关于消息中间件的规范，或者说是一套统一的API。支持JMS的消息中间件有很多，ActiveMQ算是其中最常用的一个。&lt;/p&gt;
&lt;h2 id=&quot;JMS两种模型&quot;&gt;&lt;a href=&quot;#J
      
    
    </summary>
    
      <category term="Spring Framework" scheme="https://xxgblog.com/categories/Spring-Framework/"/>
    
    
      <category term="Spring Framework" scheme="https://xxgblog.com/tags/Spring-Framework/"/>
    
      <category term="JMS" scheme="https://xxgblog.com/tags/JMS/"/>
    
      <category term="ActiveMQ" scheme="https://xxgblog.com/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>Jetty/Tomcat + Nginx反向代理获取客户端真实IP、域名、协议、端口</title>
    <link href="https://xxgblog.com/2017/06/23/jetty-tomcat-nginx-proxy-config/"/>
    <id>https://xxgblog.com/2017/06/23/jetty-tomcat-nginx-proxy-config/</id>
    <published>2017-06-23T01:49:00.000Z</published>
    <updated>2018-10-12T08:02:50.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Nginx反向代理后，Servlet应用通过<code>request.getRemoteAddr()</code>取到的IP是Nginx的IP地址，并非客户端真实IP，通过<code>request.getRequestURL()</code>获取的域名、协议、端口都是Nginx访问Web应用时的域名、协议、端口，而非客户端浏览器地址栏上的真实域名、协议、端口。</p><p>例如在某一台IP为10.4.64.22的服务器上，Jetty或者Tomcat端口号为8080，Nginx端口号80，Nginx反向代理8080端口：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:8080; <span class="comment"># 反向代理应用服务器HTTP地址</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在另一台机器上用浏览器打开<a href="http://10.4.64.22/test" target="_blank" rel="noopener">http://10.4.64.22/test</a>访问某个Servlet应用，获取客户端IP和URL：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"RemoteAddr: "</span> + request.getRemoteAddr());</span><br><span class="line">System.out.println(<span class="string">"URL: "</span> + request.getRequestURL().toString());</span><br></pre></td></tr></table></figure></p><p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RemoteAddr: 127.0.0.1</span><br><span class="line">URL: http://127.0.0.1:8080/test</span><br></pre></td></tr></table></figure></p><p>可以发现，Servlet程序获取到的客户端IP是本地Nginx的IP而非浏览器所在机器的IP，获取到的URL是Nginx proxy_pass配置的URL组成的地址，而非浏览器地址栏上的真实地址。如果将Nginx用作https服务器反向代理后端的http服务，那么<code>request.getRequestURL()</code>获取的URL是http前缀的而非https前缀，无法获取到浏览器地址栏的真实协议。如果此时将<code>request.getRequestURL()</code>获取得到的URL用作拼接Redirect地址，就会出现跳转到错误的地址，这也是Nginx反向代理时经常出现的一个问题。</p><h3 id="问题产生的原因"><a href="#问题产生的原因" class="headerlink" title="问题产生的原因"></a>问题产生的原因</h3><p>Nginx的反向代理实际上是客户端和真实的应用服务器之间的一个桥梁，客户端（一般是浏览器）访问Nginx服务器，Nginx再去访问Web应用服务器。对于Web应用来说，这次HTTP请求的客户端是Nginx而非真实的客户端浏览器，如果不做特殊处理的话，Web应用会把Nginx当作请求的客户端，获取到的客户端信息就是Nginx的一些信息。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>解决这个问题要从两个方面来解决：</p><ol><li>由于Nginx是代理服务器，所有客户端请求都从Nginx转发到Jetty/Tomcat，如果Nginx不把客户端真实IP、域名、协议、端口告诉Jetty/Tomcat，那么Jetty/Tomcat应用是永远不会知道这些信息的，所以需要Nginx配置一些HTTP Header来将这些信息告诉被代理的Jetty/Tomcat；</li><li>Jetty/Tomcat这一端，不能再傻乎乎的获取直接和它连接的客户端（也就是Nginx）的信息，而是要从Nginx传递过来的HTTP Header中获取客户端信息。</li></ol><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>添加以下配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br></pre></td></tr></table></figure></p><p>解释以下上面的配置，以上配置是在Nginx反向代理的时候，添加一些请求Header。</p><ol><li><code>Host</code>包含客户端真实的域名和端口号；</li><li><code>X-Forwarded-Proto</code>表示客户端真实的协议（http还是https）；</li><li><code>X-Real-IP</code>表示客户端真实的IP；</li><li><code>X-Forwarded-For</code>和<code>X-Real-IP</code>类似，但它在多层代理时会包含真实客户端及中间每个代理服务器的IP，每个IP用逗号隔开，一般来说最左边的第一个IP地址就是客户端IP。</li></ol><p>再试一下<code>request.getRemoteAddr()</code>和<code>request.getRequestURL()</code>的输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RemoteAddr: 127.0.0.1</span><br><span class="line">URL: http://10.4.64.22/test</span><br></pre></td></tr></table></figure></p><p>可以发现URL好像已经没问题了，但是IP还是本地的IP而非真实客户端IP。但是如果是用Nginx作为https服务器反向代理到http服务器，会发现浏览器地址栏是https前缀但是<code>request.getRequestURL()</code>获取到的URL还是http前缀，也就是仅仅配置Nginx还不能彻底解决问题。</p><h2 id="Jetty-Tomcat"><a href="#Jetty-Tomcat" class="headerlink" title="Jetty/Tomcat"></a>Jetty/Tomcat</h2><p>如果你在网上搜索“Java如何获取客户端真实IP”，搜索到的解决方案大多是通过获取HTTP请求头<code>request.getHeader(&quot;X-Forwarded-For&quot;)</code>或<code>request.getHeader(&quot;X-Real-IP&quot;)</code>来实现，也就是上面在Nginx上配置的Header，这种方案获取的结果的确是正确的，但是我个人觉得并不优雅。因为既然Servlet API提供了<code>request.getRemoteAddr()</code>方法获取客户端IP，那么无论有没有用反向代理对于代码编写者来说应该是透明的。下面介绍一种更加优雅的方式。</p><h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><p>在Jetty服务器的jetty.xml文件中，找到<code>httpConfig</code>，加入配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">New</span> <span class="attr">id</span>=<span class="string">"httpConfig"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.HttpConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Call</span> <span class="attr">name</span>=<span class="string">"addCustomizer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Arg</span>&gt;</span><span class="tag">&lt;<span class="name">New</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.ForwardedRequestCustomizer"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Call</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">New</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>重新启动Jetty，再用浏览器打开<a href="http://10.4.64.22/test" target="_blank" rel="noopener">http://10.4.64.22/test</a>测试，结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RemoteAddr: 10.1.3.7</span><br><span class="line">URL: http://10.4.64.22/test</span><br></pre></td></tr></table></figure></p><p>此时可发现通过<code>request.getRemoteAddr()</code>获取到的IP不再是<code>127.0.0.1</code>而是客户端真实IP，<code>request.getRequestURL()</code>获取的URL也是浏览器上的真实URL，如果Nginx作为https代理，<code>request.getRequestURL()</code>的前缀也会是https。</p><p>另外，Jetty将这个功能封装成一个模块：http-forwarded。如果不想改jetty.xml配置文件的话，也可以启用http-forwarded模块来实现。</p><p>例如可以通过命令行启动Jetty：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar start.jar --module=http-forwarded</span><br></pre></td></tr></table></figure></p><p>如果有兴趣可以查看<code>org.eclipse.jetty.server.ForwardedRequestCustomizer</code>的<a href="https://github.com/eclipse/jetty.project/blob/jetty-9.3.8.v20160314/jetty-server/src/main/java/org/eclipse/jetty/server/ForwardedRequestCustomizer.java" target="_blank" rel="noopener">源码</a>，原理也就是从<code>X-Forwarded-For</code>头中取到第一个IP地址。</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>和Jetty类似，如果使用Tomcat作为应用服务器，可以通过配置Tomcat的server.xml文件，在Host元素内最后加入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>更多用法也可以参考文档：<a href="https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html" target="_blank" rel="noopener">https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;Nginx反向代理后，Servlet应用通过&lt;code&gt;request.getRemoteAddr()&lt;/code&gt;取到的IP是Nginx的
      
    
    </summary>
    
      <category term="Nginx" scheme="https://xxgblog.com/categories/Nginx/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Jetty" scheme="https://xxgblog.com/tags/Jetty/"/>
    
      <category term="Nginx" scheme="https://xxgblog.com/tags/Nginx/"/>
    
      <category term="Tomcat" scheme="https://xxgblog.com/tags/Tomcat/"/>
    
      <category term="Servlet" scheme="https://xxgblog.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>MINA、Netty、Twisted一起学（十二）：HTTPS</title>
    <link href="https://xxgblog.com/2017/02/28/mina-netty-twisted-12/"/>
    <id>https://xxgblog.com/2017/02/28/mina-netty-twisted-12/</id>
    <published>2017-02-28T05:14:00.000Z</published>
    <updated>2017-02-28T04:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于HTTPS协议是由HTTP协议加上SSL/TLS协议组合而成，在阅读本文前可以先阅读一下<a href="http://xxgblog.com/2014/09/23/mina-netty-twisted-8/">HTTP服务器</a>和<a href="http://xxgblog.com/2017/02/27/mina-netty-twisted-11/">SSL/TLS</a>两篇博文，本文中的代码也是由这两篇博文中的代码组合而成。</p><h2 id="HTTPS介绍"><a href="#HTTPS介绍" class="headerlink" title="HTTPS介绍"></a>HTTPS介绍</h2><p><a href="http://xxgblog.com/2017/02/27/mina-netty-twisted-11/">上一篇博文</a>中介绍了SSL/TLS协议，我们平时接触最多的SSL/TLS协议的应用就是HTTPS协议了，现在可以看到越来越多的网站已经是https开头了，百度搜索也由曾经的http改为https。有关百度为什么升级https推荐阅读：<a href="http://zhanzhang.baidu.com/wiki/383" target="_blank" rel="noopener">http://zhanzhang.baidu.com/wiki/383</a></p><p>HTTPS即HTTP over SSL，实际上就是在原来HTTP协议的底层加入了SSL/TLS协议层，使得客户端（例如浏览器）与服务器之间的通信加密传输，攻击者无法窃听和篡改。相对而言HTTP协议则是明文传输，安全性并不高。</p><p>HTTPS主要可以避免以下几个安全问题：</p><ol><li>窃听隐私：使用明文传输的HTTP协议，传输过程中的信息都可能会被攻击者窃取到，例如你登录网站的用户名和密码、在电商的购买记录、搜索记录等，这就会造成例如账号被盗、各种隐私泄漏的风险。而使用HTTPS对通信内容加密过后，即使被攻击者窃取到也无法破解其中的内容。</li><li>篡改内容：HTTP使用明文传输，不但消息会被窃取，还可能被篡改，例如常见的运营HTTP商劫持。你是否曾经浏览http协议的百度时，时不时会在页面下方弹出小广告，这些小广告并不是百度放上去的，而是电信网通等运营商干的，运营商通过篡改服务器返回的页面内容，加入一段HTML代码就可以轻松实现小广告。而使用HTTPS的百度，就不再会出现这样的小广告，因为攻击者无法对传输内容解密和加密，就无法篡改。<br><img src="/img/c3c34282-fd05-11e6-bc64-92361f002671.jpg" alt="HTTP劫持插入广告"></li><li>冒充：例如DNS劫持，当你输入一个http网址在浏览器打开时，有可能打开的是一个假的网站，连的并不是真网站的服务器，假的网站可能给你弹出广告，还可能让你输入用户名密码来盗取账户。使用HTTPS的话，服务器都会有数字证书和私钥，数字证书公开的，私钥是网站服务器私密的，假网站如果使用假的证书，浏览器会拦截并提示，如果使用真的证书，由于没有私钥也无法建立连接。<br><img src="/img/4cf95892-fd07-11e6-bc64-92361f002671.jpg" alt="证书有问题时的浏览器提示"></li></ol><h2 id="生成私钥和证书"><a href="#生成私钥和证书" class="headerlink" title="生成私钥和证书"></a>生成私钥和证书</h2><p>浏览器信任的证书一般是CA机构（证书授权中心）颁发的，证书有收费的也有免费的，本文使用免费证书用于测试。可以在腾讯云<a href="https://www.qcloud.com/product/ssl" target="_blank" rel="noopener">https://www.qcloud.com/product/ssl</a>申请一个免费证书，申请证书前需要提供一个域名，即该证书作用的域名。</p><p>我在本文中使用的是我自己的域名gw2.vsgames.cn在腾讯云申请的免费证书，如果没有自己的域名无法申请免费证书，可以在本文的末尾下载源码，其中有我生成好的证书用于测试。</p><p>证书生成好下载后包含一个<strong>私钥文件</strong>(.key)和一个<strong>证书文件</strong>(.crt)，腾讯云生成的证书可以在Nginx目录下找到这两个文件。</p><p>这两个文件在Twisted中可以直接使用，但是Java只能使用PKCS#8私钥文件，需要对上面的.key文件用openssl进行转换（如果你是在我提供的源码中获取证书和私钥文件，我已经提供了转换好的私钥，可以跳过这一步）。</p><p>转换成DER二进制格式私钥文件，供MINA使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> 2_gw2.vsgames.cn.key -outform DER -nocrypt -out private.der</span><br></pre></td></tr></table></figure></p><p>转换成PEM文本格式私钥文件，供Netty使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> 2_gw2.vsgames.cn.key -outform PEM -nocrypt -out private.pem</span><br></pre></td></tr></table></figure></p><p>除了在CA机构申请证书，还可以通过自签名的方式生成私钥和证书，<a href="http://xxgblog.com/2017/02/27/mina-netty-twisted-11/#生成私钥和证书">上一篇博文</a>中采用的就是这种方式。不过由于自签名的证书不是CA机构颁发，不受浏览器信任，在浏览器打开HTTPS地址时会有安全提示，测试时可以忽略提示。</p><h2 id="HTTPS服务器实现"><a href="#HTTPS服务器实现" class="headerlink" title="HTTPS服务器实现"></a>HTTPS服务器实现</h2><p>将<a href="http://xxgblog.com/2014/09/23/mina-netty-twisted-8/">MINA、Netty、Twisted一起学（八）：HTTP服务器</a>和<a href="http://xxgblog.com/2017/02/27/mina-netty-twisted-11/">MINA、Netty、Twisted一起学（十一）：SSL/TLS</a>中的代码结合起来，即可实现HTTPS服务器。</p><h3 id="MINA"><a href="#MINA" class="headerlink" title="MINA"></a>MINA</h3><p>在<a href="http://xxgblog.com/2014/09/23/mina-netty-twisted-8/#MINA">http://xxgblog.com/2014/09/23/mina-netty-twisted-8/#MINA</a>代码的基础上，在<code>HttpServerCodec</code>之前加上<code>SslFilter</code>即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String certPath = <span class="string">"/Users/wucao/Desktop/https/1_gw2.vsgames.cn_bundle.crt"</span>;  <span class="comment">// 证书</span></span><br><span class="line">        String privateKeyPath = <span class="string">"/Users/wucao/Desktop/https/private.der"</span>;  <span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 证书</span></span><br><span class="line">        <span class="comment">// https://docs.oracle.com/javase/7/docs/api/java/security/cert/X509Certificate.html</span></span><br><span class="line">        InputStream inStream = <span class="keyword">null</span>;</span><br><span class="line">        Certificate certificate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inStream = <span class="keyword">new</span> FileInputStream(certPath);</span><br><span class="line">            CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">            certificate = cf.generateCertificate(inStream);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私钥</span></span><br><span class="line">        PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(Files.readAllBytes(<span class="keyword">new</span> File(privateKeyPath).toPath()));</span><br><span class="line">        PrivateKey privateKey = KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePrivate(keySpec);</span><br><span class="line"></span><br><span class="line">        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        ks.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Certificate[] certificates = &#123;certificate&#125;;</span><br><span class="line">        ks.setKeyEntry(<span class="string">"key"</span>, privateKey, <span class="string">""</span>.toCharArray(), certificates);</span><br><span class="line"></span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        kmf.init(ks, <span class="string">""</span>.toCharArray());</span><br><span class="line"></span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">        sslContext.init(kmf.getKeyManagers(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        IoAcceptor acceptor = <span class="keyword">new</span> NioSocketAcceptor();</span><br><span class="line">        DefaultIoFilterChainBuilder chain = acceptor.getFilterChain();</span><br><span class="line">        chain.addLast(<span class="string">"ssl"</span>, <span class="keyword">new</span> SslFilter(sslContext));  <span class="comment">// SslFilter + HttpServerCodec实现HTTPS</span></span><br><span class="line">        chain.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        acceptor.setHandler(<span class="keyword">new</span> HttpServerHandle());</span><br><span class="line">        acceptor.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpServerHandle</span> <span class="keyword">extends</span> <span class="title">IoHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(IoSession session, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(IoSession session, Object message)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求，解码器将请求转换成HttpRequest对象</span></span><br><span class="line">            HttpRequest request = (HttpRequest) message;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取请求参数</span></span><br><span class="line">            String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">            <span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                name = <span class="string">"World"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            name = URLDecoder.decode(name, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应HTML</span></span><br><span class="line">            String responseHtml = <span class="string">"&lt;html&gt;&lt;body&gt;Hello, "</span> + name + <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] responseBytes = responseHtml.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="keyword">int</span> contentLength = responseBytes.length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构造HttpResponse对象，HttpResponse只包含响应的status line和header部分</span></span><br><span class="line">            Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            headers.put(<span class="string">"Content-Type"</span>, <span class="string">"text/html; charset=utf-8"</span>);</span><br><span class="line">            headers.put(<span class="string">"Content-Length"</span>, Integer.toString(contentLength));</span><br><span class="line">            HttpResponse response = <span class="keyword">new</span> DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SUCCESS_OK, headers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应BODY</span></span><br><span class="line">            IoBuffer responseIoBuffer = IoBuffer.allocate(contentLength);</span><br><span class="line">            responseIoBuffer.put(responseBytes);</span><br><span class="line">            responseIoBuffer.flip();</span><br><span class="line"></span><br><span class="line">            session.write(response); <span class="comment">// 响应的status line和header部分</span></span><br><span class="line">            session.write(responseIoBuffer); <span class="comment">// 响应body部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p>在<a href="http://xxgblog.com/2014/09/23/mina-netty-twisted-8/#Netty">http://xxgblog.com/2014/09/23/mina-netty-twisted-8/#Netty</a>代码的基础上，在<code>ChannelPipeline</code>最前边加上<code>SslHandler</code>即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SSLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File certificate = <span class="keyword">new</span> File(<span class="string">"/Users/wucao/Desktop/https/1_gw2.vsgames.cn_bundle.crt"</span>);  <span class="comment">// 证书</span></span><br><span class="line">        File privateKey = <span class="keyword">new</span> File(<span class="string">"/Users/wucao/Desktop/https/private.pem"</span>);  <span class="comment">// 私钥</span></span><br><span class="line">        <span class="keyword">final</span> SslContext sslContext = SslContextBuilder.forServer(certificate, privateKey).build();</span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 加入SslHandler实现HTTPS</span></span><br><span class="line">                            SslHandler sslHandler = sslContext.newHandler(ch.alloc());</span><br><span class="line">                            pipeline.addLast(sslHandler);</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture f = b.bind(<span class="number">8080</span>).sync();</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求，解码器将请求转换成HttpRequest对象</span></span><br><span class="line">            HttpRequest request = (HttpRequest) msg;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取请求参数</span></span><br><span class="line">            QueryStringDecoder queryStringDecoder = <span class="keyword">new</span> QueryStringDecoder(request.uri());</span><br><span class="line">            String name = <span class="string">"World"</span>;</span><br><span class="line">            <span class="keyword">if</span>(queryStringDecoder.parameters().get(<span class="string">"name"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                name = queryStringDecoder.parameters().get(<span class="string">"name"</span>).get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应HTML</span></span><br><span class="line">            String responseHtml = <span class="string">"&lt;html&gt;&lt;body&gt;Hello, "</span> + name + <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] responseBytes = responseHtml.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="keyword">int</span> contentLength = responseBytes.length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构造FullHttpResponse对象，FullHttpResponse包含message body</span></span><br><span class="line">            FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.wrappedBuffer(responseBytes));</span><br><span class="line">            response.headers().set(<span class="string">"Content-Type"</span>, <span class="string">"text/html; charset=utf-8"</span>);</span><br><span class="line">            response.headers().set(<span class="string">"Content-Length"</span>, Integer.toString(contentLength));</span><br><span class="line"></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Twisted"><a href="#Twisted" class="headerlink" title="Twisted"></a>Twisted</h3><p>将<a href="http://xxgblog.com/2014/09/23/mina-netty-twisted-8/#Twisted">http://xxgblog.com/2014/09/23/mina-netty-twisted-8/#Twisted</a>中reactor.listenTCP改为的reactor.listenSSL，即可从HTTP协议切到HTTPS协议。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 –*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, ssl</span><br><span class="line"><span class="keyword">from</span> twisted.web <span class="keyword">import</span> server, resource</span><br><span class="line"></span><br><span class="line">sslContext = ssl.DefaultOpenSSLContextFactory(</span><br><span class="line">    <span class="string">'/Users/wucao/Desktop/https/2_gw2.vsgames.cn.key'</span>,  <span class="comment"># 私钥</span></span><br><span class="line">    <span class="string">'/Users/wucao/Desktop/https/1_gw2.vsgames.cn_bundle.crt'</span>,  <span class="comment"># 证书</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainResource</span><span class="params">(resource.Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    isLeaf = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于处理GET类型请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render_GET</span><span class="params">(self, request)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># name参数</span></span><br><span class="line">        name = <span class="string">'World'</span></span><br><span class="line">        <span class="keyword">if</span> request.args.has_key(<span class="string">'name'</span>):</span><br><span class="line">            name = request.args[<span class="string">'name'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置响应编码</span></span><br><span class="line">        request.responseHeaders.addRawHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html; charset=utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 响应的内容直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;html&gt;&lt;body&gt;Hello, "</span> + name + <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">site = server.Site(MainResource())</span><br><span class="line">reactor.listenSSL(<span class="number">8080</span>, site, sslContext)</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure></p><h2 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h2><p>由于浏览器就是最天然的HTTPS客户端，这里可以使用浏览器来测试。</p><p>首先，由于我的证书对应的域名是gw2.vsgames.cn，而服务器代码运行在本机上，所以先需要配置hosts将域名解析到localhost上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 gw2.vsgames.cn</span><br></pre></td></tr></table></figure></p><p>在浏览器打开<a href="https://gw2.vsgames.cn:8080/?name=叉叉哥" target="_blank" rel="noopener">https://gw2.vsgames.cn:8080/?name=叉叉哥</a>可以看到测试结果：<br><img src="/img/f0cd95c6-fd68-11e6-bc64-92361f002671.jpg" alt="浏览器测试HTTPS服务器"><br>证书和私钥正确的HTTPS服务器，在Chrome浏览器左上角会有“安全”提示，其他浏览器也会有相应的提示。</p><h2 id="MINA、Netty、Twisted一起学系列"><a href="#MINA、Netty、Twisted一起学系列" class="headerlink" title="MINA、Netty、Twisted一起学系列"></a>MINA、Netty、Twisted一起学系列</h2><p><a href="http://xxgblog.com/2014/08/15/mina-netty-twisted-1/">MINA、Netty、Twisted一起学（一）：实现简单的TCP服务器</a></p><p><a href="http://xxgblog.com/2014/08/21/mina-netty-twisted-2/">MINA、Netty、Twisted一起学（二）：TCP消息边界问题及按行分割消息</a></p><p><a href="http://xxgblog.com/2014/08/22/mina-netty-twisted-3/">MINA、Netty、Twisted一起学（三）：TCP消息固定大小的前缀(Header)</a></p><p><a href="http://xxgblog.com/2014/08/25/mina-netty-twisted-4/">MINA、Netty、Twisted一起学（四）：定制自己的协议</a></p><p><a href="http://xxgblog.com/2014/08/27/mina-netty-twisted-5/">MINA、Netty、Twisted一起学（五）：整合protobuf</a></p><p><a href="http://xxgblog.com/2014/09/10/mina-netty-twisted-6/">MINA、Netty、Twisted一起学（六）：session</a></p><p><a href="http://xxgblog.com/2014/09/19/mina-netty-twisted-7/">MINA、Netty、Twisted一起学（七）：发布/订阅（Publish/Subscribe）</a></p><p><a href="http://xxgblog.com/2014/09/23/mina-netty-twisted-8/">MINA、Netty、Twisted一起学（八）：HTTP服务器</a></p><p><a href="http://xxgblog.com/2014/10/12/mina-netty-twisted-9/">MINA、Netty、Twisted一起学（九）：异步IO和回调函数</a></p><p><a href="http://xxgblog.com/2014/10/16/mina-netty-twisted-10/">MINA、Netty、Twisted一起学（十）：线程模型</a></p><p><a href="http://xxgblog.com/2017/02/27/mina-netty-twisted-11/">MINA、Netty、Twisted一起学（十一）：SSL/TLS</a></p><p><a href="http://xxgblog.com/2017/02/28/mina-netty-twisted-12/">MINA、Netty、Twisted一起学（十二）：HTTPS</a></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/wucao/mina-netty-twisted" target="_blank" rel="noopener">https://github.com/wucao/mina-netty-twisted</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于HTTPS协议是由HTTP协议加上SSL/TLS协议组合而成，在阅读本文前可以先阅读一下&lt;a href=&quot;http://xxgblog.com/2014/09/23/mina-netty-twisted-8/&quot;&gt;HTTP服务器&lt;/a&gt;和&lt;a href=&quot;http://x
      
    
    </summary>
    
      <category term="异步网络编程" scheme="https://xxgblog.com/categories/%E5%BC%82%E6%AD%A5%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="MINA" scheme="https://xxgblog.com/tags/MINA/"/>
    
      <category term="Netty" scheme="https://xxgblog.com/tags/Netty/"/>
    
      <category term="Twisted" scheme="https://xxgblog.com/tags/Twisted/"/>
    
      <category term="TCP" scheme="https://xxgblog.com/tags/TCP/"/>
    
      <category term="Python" scheme="https://xxgblog.com/tags/Python/"/>
    
      <category term="HTTPS" scheme="https://xxgblog.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>MINA、Netty、Twisted一起学（十一）：SSL/TLS</title>
    <link href="https://xxgblog.com/2017/02/27/mina-netty-twisted-11/"/>
    <id>https://xxgblog.com/2017/02/27/mina-netty-twisted-11/</id>
    <published>2017-02-27T05:14:00.000Z</published>
    <updated>2017-02-28T04:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SSL-TLS"><a href="#什么是SSL-TLS" class="headerlink" title="什么是SSL/TLS"></a>什么是SSL/TLS</h2><p>不使用SSL/TLS的网络通信，一般都是明文传输，网络传输内容在传输过程中很容易被窃听甚至篡改，非常不安全。SSL/TLS协议就是为了解决这些安全问题而设计的。SSL/TLS协议位于TCP/IP协议之上，各个应用层协议之下，使网络传输的内容通过加密算法加密，并且只有服务器和客户端可以加密解密，中间人即使抓到数据包也无法解密获取传输的内容，从而避免安全问题。例如广泛使用的HTTPS协议即是在TCP协议和HTTP协议之间加了一层SSL/TLS协议，<a href="http://xxgblog.com/2017/02/28/mina-netty-twisted-12/">下一篇博文</a>中有HTTPS更详细的介绍。</p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><p>在学习SSL/TLS协议之前，首先要了解一些相关概念：</p><ul><li>对称加密：加密和解密都采用同一个密钥，常用的算法有DES、3DES、AES，相对于非对称加密算法更简单速度更快。</li><li>非对称加密：和对称加密算法不同，非对称加密算法会有两个密钥：公钥（可以公开的）和私钥（私有的），例如客户端如果使用公钥加密，那么即时其他人有公钥也无法解密，只能通过服务器私有的私钥解密。RSA算法即是典型的非对称加密算法。</li><li>数字证书：数字证书是一个包含公钥并且通过权威机构发行的一串数据，数字证书很多需要付费购买，也有免费的，另外也可以自己生成数字证书，本文中将会采用自签名的方式生成数字证书。</li></ul><h2 id="SSL-TLS流程"><a href="#SSL-TLS流程" class="headerlink" title="SSL/TLS流程"></a>SSL/TLS流程</h2><p>使用SSL/TLS协议的服务器和客户端开始通信之前，会先进行一个握手阶段：</p><ol><li>客户端发出请求：这一步客户端会生成一个随机数传给服务器；</li><li>服务器回应：这一步服务器会返回给客户端一个服务器数字证书（证书中包含用于加密的公钥），另外服务器也会生成一个随机数给客户端；</li><li>客户端回应：这一步客户端首先会校验数字证书的合法性，然后会再生成一个随机数，这个随机数会使用第2步中的公钥采用非对称加密算法（例如RSA算法）进行加密后传给服务器，密文只能通过服务器的私钥来解密。</li><li>服务器最后回应：握手结束。</li></ol><p>握手结束后，客户端和服务器都有上面握手阶段的三个随机数。客户端和服务器都通过这三个随机生成一个密钥，接下来所有的通信内容都使用这个密钥通过对称加密算法加密传输，服务器和客户端才开始进行安全的通信。</p><p>如果看到这里还是一脸懵逼，可以参考<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">SSL/TLS协议运行机制的概述</a>更深入地了解SSL/TLS流程，本文不再过多介绍。</p><h2 id="生成私钥和证书"><a href="#生成私钥和证书" class="headerlink" title="生成私钥和证书"></a>生成私钥和证书</h2><p>使用openssl来生成私钥和证书：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -nodes -days 365 -keyout private.pem -out cert.crt</span><br></pre></td></tr></table></figure></p><p>运行以上命令后，会在当前目录下生成一个私钥文件（private.pem）和一个证书文件（cert.crt）。</p><p>生成的私钥和证书Twisted、Netty可以直接使用，然而MINA对私钥文件的格式的要求，要将pem格式转换成der格式，实际上就是将文本文件私钥转成二进制文件私钥。openssl将private.pem转成private.der私钥文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> private.pem -outform DER -nocrypt -out private.der</span><br></pre></td></tr></table></figure></p><h2 id="SSL-TLS服务器"><a href="#SSL-TLS服务器" class="headerlink" title="SSL/TLS服务器"></a>SSL/TLS服务器</h2><p>接下来在<a href="http://xxgblog.com/2014/08/21/mina-netty-twisted-2/">http://xxgblog.com/2014/08/21/mina-netty-twisted-2/</a>一文的基础上，加上SSL/TLS层。</p><h3 id="MINA"><a href="#MINA" class="headerlink" title="MINA"></a>MINA</h3><p>MINA可以通过SslFilter来实现SSL/TLS，初始化SslFilter的代码比较繁琐：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinaServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String certPath = <span class="string">"/Users/wucao/Desktop/ssl/cert.crt"</span>;  <span class="comment">// 证书</span></span><br><span class="line">        String privateKeyPath = <span class="string">"/Users/wucao/Desktop/ssl/private.der"</span>;  <span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 证书</span></span><br><span class="line">        <span class="comment">// https://docs.oracle.com/javase/7/docs/api/java/security/cert/X509Certificate.html</span></span><br><span class="line">        InputStream inStream = <span class="keyword">null</span>;</span><br><span class="line">        Certificate certificate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inStream = <span class="keyword">new</span> FileInputStream(certPath);</span><br><span class="line">            CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">            certificate = cf.generateCertificate(inStream);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 私钥</span></span><br><span class="line">        PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(Files.readAllBytes(<span class="keyword">new</span> File(privateKeyPath).toPath()));</span><br><span class="line">        PrivateKey privateKey = KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePrivate(keySpec);</span><br><span class="line"></span><br><span class="line">        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        ks.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Certificate[] certificates = &#123;certificate&#125;;</span><br><span class="line">        ks.setKeyEntry(<span class="string">"key"</span>, privateKey, <span class="string">""</span>.toCharArray(), certificates);</span><br><span class="line"></span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        kmf.init(ks, <span class="string">""</span>.toCharArray());</span><br><span class="line"></span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">        sslContext.init(kmf.getKeyManagers(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        IoAcceptor acceptor = <span class="keyword">new</span> NioSocketAcceptor();</span><br><span class="line">        DefaultIoFilterChainBuilder chain = acceptor.getFilterChain();</span><br><span class="line">        chain.addLast(<span class="string">"ssl"</span>, <span class="keyword">new</span> SslFilter(sslContext));  <span class="comment">// SslFilter需要放在最前面</span></span><br><span class="line">        chain.addLast(<span class="string">"codec"</span>, <span class="keyword">new</span> ProtocolCodecFilter(<span class="keyword">new</span> TextLineCodecFactory(Charset.forName(<span class="string">"UTF-8"</span>), <span class="string">"\r\n"</span>, <span class="string">"\r\n"</span>)));</span><br><span class="line">        acceptor.setHandler(<span class="keyword">new</span> TcpServerHandle());</span><br><span class="line">        acceptor.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TcpServerHandle</span> <span class="keyword">extends</span> <span class="title">IoHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(IoSession session, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(IoSession session, Object message)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String line = (String) message;</span><br><span class="line">        System.out.println(<span class="string">"messageReceived:"</span> + line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(IoSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sessionCreated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionClosed</span><span class="params">(IoSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sessionClosed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><p>Netty通过添加一个SslHandler来实现SSL/TLS，相对MINA来说代码就比较简洁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, SSLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File certificate = <span class="keyword">new</span> File(<span class="string">"/Users/wucao/Desktop/ssl/cert.crt"</span>);  <span class="comment">// 证书</span></span><br><span class="line">        File privateKey = <span class="keyword">new</span> File(<span class="string">"/Users/wucao/Desktop/ssl/private.pem"</span>);  <span class="comment">// 私钥</span></span><br><span class="line">        <span class="keyword">final</span> SslContext sslContext = SslContextBuilder.forServer(certificate, privateKey).build();</span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span></span></span><br><span class="line"><span class="function">                                <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// SslHandler要放在最前面</span></span><br><span class="line">                            SslHandler sslHandler = sslContext.newHandler(ch.alloc());</span><br><span class="line">                            pipeline.addLast(sslHandler);</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">80</span>));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> TcpServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture f = b.bind(<span class="number">8080</span>).sync();</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TcpServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        String line = (String) msg;</span><br><span class="line">        System.out.println(<span class="string">"channelRead:"</span> + line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelActive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelInactive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Twisted"><a href="#Twisted" class="headerlink" title="Twisted"></a>Twisted</h3><p>Twisted实现SSL/TLS也是非常简单的，将reactor.listenTCP替换为reactor.listenSSL即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 –*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.protocols.basic <span class="keyword">import</span> LineOnlyReceiver</span><br><span class="line"><span class="keyword">from</span> twisted.internet.protocol <span class="keyword">import</span> Factory</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, ssl</span><br><span class="line"></span><br><span class="line">sslContext = ssl.DefaultOpenSSLContextFactory(</span><br><span class="line">    <span class="string">'/Users/wucao/Desktop/ssl/private.pem'</span>,  <span class="comment"># 私钥</span></span><br><span class="line">    <span class="string">'/Users/wucao/Desktop/ssl/cert.crt'</span>,  <span class="comment"># 公钥</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TcpServerHandle</span><span class="params">(LineOnlyReceiver)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'connectionMade'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionLost</span><span class="params">(self, reason)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'connectionLost'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lineReceived</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'lineReceived:'</span> + data</span><br><span class="line"></span><br><span class="line">factory = Factory()</span><br><span class="line">factory.protocol = TcpServerHandle</span><br><span class="line">reactor.listenSSL(<span class="number">8080</span>, factory, sslContext)</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure></p><h2 id="SSL-TLS客户端"><a href="#SSL-TLS客户端" class="headerlink" title="SSL/TLS客户端"></a>SSL/TLS客户端</h2><p>这里还是使用Java来写一个SSL/TLS客户端，用来测试以上三个服务器程序。需要注意的是，在上面SSL/TLS流程的介绍中，SSL/TLS握手阶段的第2步服务器会将证书传给客户端，第3步客户端会校验证书的合法性，所以下面的代码首先会让客户端信任openssl生成的证书，才能正确的完成SSL/TLS握手。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSLClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端信任改证书，将用于校验服务器传过来的证书的合法性</span></span><br><span class="line">        String certPath = <span class="string">"/Users/wucao/Desktop/ssl/cert.crt"</span>;</span><br><span class="line">        InputStream inStream = <span class="keyword">null</span>;</span><br><span class="line">        Certificate certificate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inStream = <span class="keyword">new</span> FileInputStream(certPath);</span><br><span class="line">            CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">            certificate = cf.generateCertificate(inStream);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                inStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        ks.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        ks.setCertificateEntry(<span class="string">"cert"</span>, certificate);</span><br><span class="line"></span><br><span class="line">        TrustManagerFactory tmf = TrustManagerFactory.getInstance(<span class="string">"sunx509"</span>);</span><br><span class="line">        tmf.init(ks);</span><br><span class="line"></span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">        sslContext.init(<span class="keyword">null</span>, tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        SSLSocketFactory socketFactory = sslContext.getSocketFactory();</span><br><span class="line"></span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream out = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            socket = socketFactory.createSocket(<span class="string">"localhost"</span>, <span class="number">8080</span>);</span><br><span class="line">            out = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求服务器</span></span><br><span class="line">            String lines = <span class="string">"床前明月光\r\n疑是地上霜\r\n举头望明月\r\n低头思故乡\r\n"</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] outputBytes = lines.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            out.write(outputBytes);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭连接</span></span><br><span class="line">            out.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="MINA、Netty、Twisted一起学系列"><a href="#MINA、Netty、Twisted一起学系列" class="headerlink" title="MINA、Netty、Twisted一起学系列"></a>MINA、Netty、Twisted一起学系列</h2><p><a href="http://xxgblog.com/2014/08/15/mina-netty-twisted-1/">MINA、Netty、Twisted一起学（一）：实现简单的TCP服务器</a></p><p><a href="http://xxgblog.com/2014/08/21/mina-netty-twisted-2/">MINA、Netty、Twisted一起学（二）：TCP消息边界问题及按行分割消息</a></p><p><a href="http://xxgblog.com/2014/08/22/mina-netty-twisted-3/">MINA、Netty、Twisted一起学（三）：TCP消息固定大小的前缀(Header)</a></p><p><a href="http://xxgblog.com/2014/08/25/mina-netty-twisted-4/">MINA、Netty、Twisted一起学（四）：定制自己的协议</a></p><p><a href="http://xxgblog.com/2014/08/27/mina-netty-twisted-5/">MINA、Netty、Twisted一起学（五）：整合protobuf</a></p><p><a href="http://xxgblog.com/2014/09/10/mina-netty-twisted-6/">MINA、Netty、Twisted一起学（六）：session</a></p><p><a href="http://xxgblog.com/2014/09/19/mina-netty-twisted-7/">MINA、Netty、Twisted一起学（七）：发布/订阅（Publish/Subscribe）</a></p><p><a href="http://xxgblog.com/2014/09/23/mina-netty-twisted-8/">MINA、Netty、Twisted一起学（八）：HTTP服务器</a></p><p><a href="http://xxgblog.com/2014/10/12/mina-netty-twisted-9/">MINA、Netty、Twisted一起学（九）：异步IO和回调函数</a></p><p><a href="http://xxgblog.com/2014/10/16/mina-netty-twisted-10/">MINA、Netty、Twisted一起学（十）：线程模型</a></p><p><a href="http://xxgblog.com/2017/02/27/mina-netty-twisted-11/">MINA、Netty、Twisted一起学（十一）：SSL/TLS</a></p><p><a href="http://xxgblog.com/2017/02/28/mina-netty-twisted-12/">MINA、Netty、Twisted一起学（十二）：HTTPS</a></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/wucao/mina-netty-twisted" target="_blank" rel="noopener">https://github.com/wucao/mina-netty-twisted</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SSL-TLS&quot;&gt;&lt;a href=&quot;#什么是SSL-TLS&quot; class=&quot;headerlink&quot; title=&quot;什么是SSL/TLS&quot;&gt;&lt;/a&gt;什么是SSL/TLS&lt;/h2&gt;&lt;p&gt;不使用SSL/TLS的网络通信，一般都是明文传输，网络传输内容在传输过程中很
      
    
    </summary>
    
      <category term="异步网络编程" scheme="https://xxgblog.com/categories/%E5%BC%82%E6%AD%A5%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="MINA" scheme="https://xxgblog.com/tags/MINA/"/>
    
      <category term="Netty" scheme="https://xxgblog.com/tags/Netty/"/>
    
      <category term="Twisted" scheme="https://xxgblog.com/tags/Twisted/"/>
    
      <category term="TCP" scheme="https://xxgblog.com/tags/TCP/"/>
    
      <category term="Python" scheme="https://xxgblog.com/tags/Python/"/>
    
      <category term="SSL" scheme="https://xxgblog.com/tags/SSL/"/>
    
      <category term="TLS" scheme="https://xxgblog.com/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Session + Redis实现分布式Session共享</title>
    <link href="https://xxgblog.com/2016/09/29/spring-session-redis/"/>
    <id>https://xxgblog.com/2016/09/29/spring-session-redis/</id>
    <published>2016-09-29T12:14:16.000Z</published>
    <updated>2016-10-08T09:45:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况下，Tomcat、Jetty等Servlet容器，会默认将Session保存在内存中。如果是单个服务器实例的应用，将Session保存在服务器内存中是一个非常好的方案。但是这种方案有一个缺点，就是不利于扩展。</p><p>目前越来越多的应用采用分布式部署，用于实现高可用性和负载均衡等。那么问题来了，如果将同一个应用部署在多个服务器上通过负载均衡对外提供访问，如何实现Session共享？</p><p>实际上实现Session共享的方案很多，其中一种常用的就是使用Tomcat、Jetty等服务器提供的Session共享功能，将Session的内容统一存储在一个数据库（如MySQL）或缓存（如Redis）中。我在<a href="http://xxgblog.com/2015/01/30/jetty-session-storage/">以前的一篇博客</a>中有介绍如何配置Jetty的Session存储在MySQL或MongoDB中。</p><p>本文主要介绍另一种实现Session共享的方案，不依赖于Servlet容器，而是Web应用代码层面的实现，直接在已有项目基础上加入Spring Session框架来实现Session统一存储在Redis中。如果你的Web应用是基于Spring框架开发的，只需要对现有项目进行少量配置，即可将一个单机版的Web应用改为一个分布式应用，由于不基于Servlet容器，所以可以随意将项目移植到其他容器。</p><h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><p>在项目中加入Spring Session的相关依赖包，包括Spring Data Redis、Jedis、Apache Commons Pool：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Data Redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Session --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Apache Commons Pool --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="配置Filter"><a href="#配置Filter" class="headerlink" title="配置Filter"></a>配置Filter</h2><p>在web.xml中加入以下过滤器，注意如果web.xml中有其他过滤器，一般情况下Spring Session的过滤器要放在第一位。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSessionRepositoryFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSessionRepositoryFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"localhost"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"your-password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只需要以上简单的配置，至此为止即已经完成Web应用Session统一存储在Redis中，可以说是及其简单。</p><h2 id="解决Redis云服务Unable-to-configure-Redis-to-keyspace-notifications异常"><a href="#解决Redis云服务Unable-to-configure-Redis-to-keyspace-notifications异常" class="headerlink" title="解决Redis云服务Unable to configure Redis to keyspace notifications异常"></a>解决Redis云服务Unable to configure Redis to keyspace notifications异常</h2><p>如果是自建服务器搭建Redis服务，以上已经完成了Spring Session配置，这一节就不用看了。不过很多公司为了稳定性、减少运维成本，会选择使用Redis云服务，例如阿里云数据库Redis版、腾讯云存储Redis等。使用过程中会出现异常：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'enableRedisKeyspaceNotificationsInitializer'</span> defined <span class="keyword">in</span> class path resource [org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.class]:</span><br><span class="line">Invocation of init method failed; nested exception is java.lang.IllegalStateException: Unable to configure Redis to keyspace notifications.</span><br><span class="line">See http://docs.spring.io/spring-session/docs/current/reference/html5/<span class="comment">#api-redisoperationssessionrepository-sessiondestroyedevent</span></span><br><span class="line">Caused by: redis.clients.jedis.exceptions.JedisDataException: ERR unknown <span class="built_in">command</span> config</span><br></pre></td></tr></table></figure></p><p>实际上这种异常发生的原因是，很多Redis云服务提供商考虑到安全因素，会禁用掉Redis的config命令：<br><img src="/img/55ca756f-3a53-4ca9-9356-ad25ac31f77d.jpg" alt="禁用config命令"><br>在错误提示链接的文档中，可以看到Redis需要以下的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli config <span class="built_in">set</span> notify-keyspace-events Egx</span><br></pre></td></tr></table></figure></p><p>文档地址：<br><a href="http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent" target="_blank" rel="noopener">http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent</a></p><p>首先要想办法给云服务Redis加上这个配置。</p><p>部分Redis云服务提供商可以在对应的管理后台配置：<br><img src="/img/20949bca-9c1e-48b6-a0b5-c50e378fc448.jpg" alt="配置notify-keyspace-events"><br>如果不能在后台配置，可以通过工单联系售后工程师帮忙配置，例如阿里云：<br><img src="/img/1911025d-031f-4846-9231-b594ca9f7f91.jpg" alt="阿里云工单"></p><p>完成之后，还需要在Spring配置文件中加上一个配置，让Spring Session不再执行config命令：</p><blockquote><p>However, in a secured Redis enviornment the config command is disabled. This means that Spring Session cannot configure Redis Keyspace events for you. To disable the automatic configuration add ConfigureRedisAction.NO_OP as a bean.</p></blockquote><p>配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"localhost"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"your-password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让Spring Session不再执行config命令 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">static-field</span>=<span class="string">"org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常情况下，Tomcat、Jetty等Servlet容器，会默认将Session保存在内存中。如果是单个服务器实例的应用，将Session保存在服务器内存中是一个非常好的方案。但是这种方案有一个缺点，就是不利于扩展。&lt;/p&gt;
&lt;p&gt;目前越来越多的应用采用分布式部署，用于实现
      
    
    </summary>
    
      <category term="Spring Framework" scheme="https://xxgblog.com/categories/Spring-Framework/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Spring Framework" scheme="https://xxgblog.com/tags/Spring-Framework/"/>
    
      <category term="Redis" scheme="https://xxgblog.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Maven仓库搭建（二）：GitHub、又拍云、七牛云存储</title>
    <link href="https://xxgblog.com/2016/09/23/maven-repo-github-qiniu-upyun/"/>
    <id>https://xxgblog.com/2016/09/23/maven-repo-github-qiniu-upyun/</id>
    <published>2016-09-23T12:14:16.000Z</published>
    <updated>2016-09-29T14:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2016/09/22/http-server-maven-repository/">上一篇博文</a>中，主要介绍了Maven仓库搭建原理，除了Nexus外，随意使用一个HTTP服务器，例如Tomcat或Nginx，都可搭建一个自己的Maven仓库。</p><p>无论是用Nexus还是HTTP服务器搭建Maven仓库，总归需要一台服务器，一台服务器需要花钱买和花时间维护，成本比较大。Nexus一般是公司用的比较多，个人不推荐使用。本文就是介绍一些适合个人搭建Maven仓库的方式，相对来说比Nexus更方便、费用更低（基本是免费的）。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>首先在GitHub上新建一个repository，例如命名为maven-repo，用来当做Maven仓库。</p><p>再将需要上传到仓库的项目用<code>mvn deploy</code>命令生成需要上传的文件（例如jar、pom、md5、sha1等各种文件）。在该项目的pom.xml中加入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>file-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>file://D:\abc<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置中url是文件生成的目录。运行<code>mvn deploy</code>命令，会在<code>D:\abc</code>目录下生成一个所需要上传到仓库的文件：<br><img src="/img/2490ce80-814c-11e6-ae22-56b6b6499611.jpg" alt="mvn deploy生成的文件"></p><p>接下来需要把这些文件上传到GitHub上，这一步如果会使用git命令的话应该会非常熟悉。进入<code>D:\abc</code>目录，运行以下命令将文件提交到GitHub：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin https://github.com/wucao/maven-repo.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>此时就可以在GitHub上看到这些文件：<br><img src="/img/be63b0df-f7a1-4ac4-92dc-9e4c3e864c04.jpg" alt="GitHub提交成功"></p><p>参考我的GitHub个人仓库：<a href="https://github.com/wucao/maven-repo" target="_blank" rel="noopener">https://github.com/wucao/maven-repo</a></p><p>GitHub项目对应的文件HTTP下载URL根目录是：<br><a href="https://raw.githubusercontent.com/wucao/maven-repo/master/" target="_blank" rel="noopener">https://raw.githubusercontent.com/wucao/maven-repo/master/</a><br>路径是用户名+GitHub仓库名+分支。</p><p>现在Maven仓库已经可以立即使用了：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>my-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://raw.githubusercontent.com/wucao/maven-repo/master<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>例如在pom.xml中加上：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxg.cloudstorage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudstorage<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>实际上Maven会根据<code>&lt;repository&gt;</code>中的URL加上<code>&lt;dependency&gt;</code>中的groupId、artifactId、version生成一个完整的文件下载的HTTP地址，例如生成的jar包下载地址：<br><a href="https://raw.githubusercontent.com/wucao/maven-repo/master/com/xxg/cloudstorage/cloudstorage/1.0.0/cloudstorage-1.0.0.jar" target="_blank" rel="noopener">https://raw.githubusercontent.com/wucao/maven-repo/master/com/xxg/cloudstorage/cloudstorage/1.0.0/cloudstorage-1.0.0.jar</a></p><h2 id="七牛云存储"><a href="#七牛云存储" class="headerlink" title="七牛云存储"></a>七牛云存储</h2><p>除了GitHub之外，七牛云存储也是一种几乎免费的Maven仓库的方案。七牛提供每月10G流量和10G存储空间，一般来说很够用了。</p><p>首先还是需要通过<code>mvn deploy</code>生成所需要上传的文件，步骤和上面GitHub搭建仓库一致，不同的是生成的文件不是上传到GitHub仓库，而是上传到七牛云存储。可以下载使用七牛提供的文件同步工具将目录同步到七牛上，具体使用文档：<br><a href="http://developer.qiniu.com/code/v6/tool/qrsync.html" target="_blank" rel="noopener">http://developer.qiniu.com/code/v6/tool/qrsync.html</a></p><p>下载完成后将conf.json配置中的文件同步目录、七牛的bucket、accessKey、secketKey修改为自己的配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"D:\\abc"</span>,</span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"qiniu:access_key=&lt;AccessKey&gt;&amp;secret_key=&lt;SecretKey&gt;&amp;bucket=&lt;Bucket&gt;"</span>,</span><br><span class="line">    <span class="string">"debug_level"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行qrsync即可上传目录下所有文件到七牛云。</p><p>在其他项目中配置七牛云的对外域名，上传到七牛云的jar包就可以在其他项目中直接使用了：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>my-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://o8sw7lrki.bkt.clouddn.com/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> <span class="comment">&lt;!-- 这里配置七牛云的对外HTTP地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>除了七牛之外，阿里云对象存储OSS、腾讯云对象存储服务COS等也都是不错的选择，原理和七牛类似。</p><h2 id="又拍云"><a href="#又拍云" class="headerlink" title="又拍云"></a>又拍云</h2><p>又拍云和七牛云原理差不多，这里单独拉出来介绍，是因为又拍云提供了FTP文件上传。Maven Deploy插件可以直接在运行<code>mvn deploy</code>命令时将文件上传到FTP服务器上。</p><p>首先根据又拍云文档，拿到FTP服务器的地址、用户名和密码：<br><a href="http://docs.upyun.com/guide/#ftpftps" target="_blank" rel="noopener">http://docs.upyun.com/guide/#ftpftps</a><br>地址：v0.ftp.upyun.com<br>用户名：操作员名/服务名<br>密码：操作员的密码</p><p>然后根据Maven Deploy插件的文档：<br><a href="https://maven.apache.org/plugins/maven-deploy-plugin/examples/deploy-ftp.html" target="_blank" rel="noopener">https://maven.apache.org/plugins/maven-deploy-plugin/examples/deploy-ftp.html</a></p><p>将以下配置加到pom.xml中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>ftp-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>ftp://v0.ftp.upyun.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Enabling the use of FTP --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.wagon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wagon-ftp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在settings.xml中加入FTP的用户名和密码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>ftp-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>操作员名/服务名<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>操作员的密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样直接运行<code>mvn deploy</code>命令，文件就直接上传到又拍云上了，相对七牛云来说方便很多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;/2016/09/22/http-server-maven-repository/&quot;&gt;上一篇博文&lt;/a&gt;中，主要介绍了Maven仓库搭建原理，除了Nexus外，随意使用一个HTTP服务器，例如Tomcat或Nginx，都可搭建一个自己的Maven仓库。&lt;
      
    
    </summary>
    
      <category term="Maven" scheme="https://xxgblog.com/categories/Maven/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Maven" scheme="https://xxgblog.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven仓库搭建（一）：一台HTTP服务器即可（Tomcat、Apache或Nginx）</title>
    <link href="https://xxgblog.com/2016/09/22/http-server-maven-repository/"/>
    <id>https://xxgblog.com/2016/09/22/http-server-maven-repository/</id>
    <published>2016-09-22T12:14:16.000Z</published>
    <updated>2016-09-23T04:41:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个Java老程序员，多多少少都会有一些自己写的各种常用代码，如果每写一个项目都把这些代码拷贝一份到新项目比较麻烦的，打成jar包引入到项目会方便很多。如果想让这些jar包能通过Maven引入进项目，那就需要搭建Maven仓库。</p><p>说到Maven仓库搭建，很多人第一想到的一般都是Nexus。Nexus的确是非常好的方案，但是总归需要一台服务器，一台服务器需要花钱买和花时间维护，成本比较大。Nexus一般是公司用的比较多，个人不建议使用。</p><p>实际上除了Nexus外，还有很多Maven仓库的搭建方案。例如可以将Maven仓库搭建在GitHub等代码托管平台上，免费。甚至也可以搭建在七牛云、又拍云、阿里云对象存储OSS、腾讯云对象存储服务COS等云存储上，加上CDN可以有很快的下载速度，虽然云存储是收费的，但是一般都有免费额度，例如一个月10G流量，通常来说已经很够用了。</p><p>本篇博文主要内容是使用HTTP服务器搭建Maven仓库，用于学习Maven仓库搭建原理，并不是想替代Nexus。在本系列接下来的博文中会讲到如何用代码托管平台（如GitHub）、云存储平台（如七牛、阿里云OSS）来搭建Maven仓库。</p><h2 id="Maven仓库搭建原理"><a href="#Maven仓库搭建原理" class="headerlink" title="Maven仓库搭建原理"></a>Maven仓库搭建原理</h2><p>首先，Maven有个中央仓库：<a href="http://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">http://repo.maven.apache.org/maven2/</a>，里面包含很多常用的开源项目的包。</p><p>在自己项目的pom.xml文件中加入一个dependency，例如Spring框架的一个包：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Maven会将仓库地址、groupId、artifactId、version四个部分拼接起来，得到最终的jar包下载地址：<br><a href="http://repo.maven.apache.org/maven2/org/springframework/spring-core/4.1.6.RELEASE/spring-core-4.1.6.RELEASE.jar" target="_blank" rel="noopener">http://repo.maven.apache.org/maven2/org/springframework/spring-core/4.1.6.RELEASE/spring-core-4.1.6.RELEASE.jar</a></p><p>当然，除了jar包外还有一些其他需要的文件，具体可以查看目录：<br><a href="http://repo.maven.apache.org/maven2/org/springframework/spring-core/4.1.6.RELEASE/" target="_blank" rel="noopener">http://repo.maven.apache.org/maven2/org/springframework/spring-core/4.1.6.RELEASE/</a></p><p><img src="/img/f17a9d70-80a4-11e6-ae22-56b6b6499611.jpg" alt="Maven中央仓库中的Spring"></p><p>如果是自己的或公司内部使用的jar包，在中央仓库肯定是没有的，这就需要配置一个自己的repository，指定包的下载地址。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>my-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://115.159.216.216:8080/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxg.cloudstorage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudstorage<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同理，此时Maven会根据repository配置的url生成文件下载地址：<br><a href="http://115.159.216.216:8080/com/xxg/cloudstorage/cloudstorage/1.0.0/cloudstorage-1.0.0.jar" target="_blank" rel="noopener">http://115.159.216.216:8080/com/xxg/cloudstorage/cloudstorage/1.0.0/cloudstorage-1.0.0.jar</a></p><h2 id="HTTP服务器搭建Maven仓库"><a href="#HTTP服务器搭建Maven仓库" class="headerlink" title="HTTP服务器搭建Maven仓库"></a>HTTP服务器搭建Maven仓库</h2><p>有了上面的理论基础，用HTTP服务器搭建Maven仓库就不难了，无非是把所需要的文件按照以上规则放到对应的目录下，HTTP服务器的作用说白了仅仅就是提供文件的HTTP下载地址。</p><p>首先需要一台服务器，再安装一个HTTP服务器软件，如Tomcat、Apache、Nginx等，任选其一即可。</p><p>例如使用Java程序员喜闻乐见的Tomcat，使用Tomcat的<code>webapps/ROOT</code>目录作为Maven仓库的文件存放目录。</p><h2 id="jar包部署到仓库"><a href="#jar包部署到仓库" class="headerlink" title="jar包部署到仓库"></a>jar包部署到仓库</h2><p>如果想把自己的jar包部署到仓库上供自己或别人引用，只有jar文件是不够的，里面上面Spring仓库的目录可以看到除了jar，还有pom、md5、sha1等各种文件，这些文件都可以通过<code>mvn deploy</code>命令来生成。</p><h3 id="方法一：手动部署"><a href="#方法一：手动部署" class="headerlink" title="方法一：手动部署"></a>方法一：手动部署</h3><p>在项目的pom.xml中添加：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>file-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>file://D:\abc<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>运行<code>mvn deploy</code>命令可以看到在<code>D:\abc</code>目录下生成了目录和各种文件。将整个目录上传到Tomcat的<code>webapps/ROOT</code>，此时在浏览器上访问以下地址即可通过HTTP直接下载jar包：<br><a href="http://115.159.216.216:8080/com/xxg/cloudstorage/cloudstorage/1.0.0/cloudstorage-1.0.0.jar" target="_blank" rel="noopener">http://115.159.216.216:8080/com/xxg/cloudstorage/cloudstorage/1.0.0/cloudstorage-1.0.0.jar</a></p><h3 id="方法二：SSH自动部署"><a href="#方法二：SSH自动部署" class="headerlink" title="方法二：SSH自动部署"></a>方法二：SSH自动部署</h3><p>如果服务器是Linux服务器，还可以直接通过<code>mvn deploy</code>通过scp方式将整个目录直接传到服务器的Tomcat的<code>webapps/ROOT</code>目录下，省去手动上传文件的步骤。</p><p>pom.xml配置服务器地址和文件路径：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>my-server<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://115.159.216.216/home/ubuntu/coder/apache-tomcat-8.5.5/webapps/ROOT<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.wagon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wagon-ssh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在Maven的settings.xml中配置服务器的SSH用户名和密码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>my-server<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>your-password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Maven仓库使用"><a href="#Maven仓库使用" class="headerlink" title="Maven仓库使用"></a>Maven仓库使用</h2><p>部署完成后，已经可以直接下载jar包，那么就可以在其他项目中通过<code>dependency</code>加入这个包的依赖了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>my-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://115.159.216.216:8080/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxg.cloudstorage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudstorage<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个Java老程序员，多多少少都会有一些自己写的各种常用代码，如果每写一个项目都把这些代码拷贝一份到新项目比较麻烦的，打成jar包引入到项目会方便很多。如果想让这些jar包能通过Maven引入进项目，那就需要搭建Maven仓库。&lt;/p&gt;
&lt;p&gt;说到Maven仓库搭建，很
      
    
    </summary>
    
      <category term="Maven" scheme="https://xxgblog.com/categories/Maven/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Maven" scheme="https://xxgblog.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven profile整合Spring profile</title>
    <link href="https://xxgblog.com/2016/06/01/maven-spring-profile/"/>
    <id>https://xxgblog.com/2016/06/01/maven-spring-profile/</id>
    <published>2016-06-01T09:14:09.000Z</published>
    <updated>2019-03-05T08:46:09.034Z</updated>
    
    <content type="html"><![CDATA[<p>在Maven和Spring中，都有profile这个概念。profile是用于区分各种环境的，例如开发环境、测试环境、正式环境等。Maven的profile用于在打包时根据指定环境替换不同环境的配置文件配置，如数据库配置。Spring的Profile可以用于在不同的环境下加载不同的bean，例如<code>@Profile</code>注解。两者一个是Maven编译和打包时生效，另一个是运行时生效，默认是没有关联的，本文会分别介绍非Spring Boot项目和Spring Boot项目整合Maven profile。</p><h2 id="Maven-profile配置"><a href="#Maven-profile配置" class="headerlink" title="Maven profile配置"></a>Maven profile配置</h2><p>在<code>pom.xml</code>中，可以配置<code>test</code>和<code>product</code>两个profile，分别对应测试环境和正式环境。这里也可以根据具体情况自定义。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>product<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时，运行<code>mvn package -Ptest</code>就会使用id为test的profile内的配置打包，<code>mvn package -Pproduct</code>就是用来打正式环境包的命令。</p><h2 id="Spring-Framework（非Spring-Boot）整合Maven-profile"><a href="#Spring-Framework（非Spring-Boot）整合Maven-profile" class="headerlink" title="Spring Framework（非Spring Boot）整合Maven profile"></a>Spring Framework（非Spring Boot）整合Maven profile</h2><h3 id="Spring-Framework如何启用一个profile"><a href="#Spring-Framework如何启用一个profile" class="headerlink" title="Spring Framework如何启用一个profile"></a>Spring Framework如何启用一个profile</h3><p>Spring启用某个profile有多种方式（摘自官方文档：<a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/core.html#beans-definition-profiles-enable" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/core.html#beans-definition-profiles-enable</a> ）：</p><blockquote><p>Activating a profile can be done in several ways, but the most straightforward is to do it programmatically against the Environment API which is available through an ApplicationContext.<br>In addition, you can also declaratively activate profiles through the spring.profiles.active property, which may be specified through system environment variables, JVM system properties, servlet context parameters in web.xml, or even as an entry in JNDI.</p></blockquote><p>总结一下有以下几种方式：</p><ul><li>通过代码设置：<code>ApplicationContext.getEnvironment().setActiveProfiles(&quot;yourProfile&quot;)</code></li><li>通过系统环境变量<code>spring.profiles.active</code>值来设置</li><li>通过JVM系统属性<code>spring.profiles.active</code>值来设置</li><li>通过<code>web.xml</code>中的<code>context-param</code>来设置</li></ul><p>为了便于跟Maven整合，我们使用<code>web.xml</code>来设置Spring profile，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.active<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>product<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上配置会启用Spring的<code>product</code> profile，即正式环境。</p><h3 id="Spring-Framework-profile整合Maven-profile"><a href="#Spring-Framework-profile整合Maven-profile" class="headerlink" title="Spring Framework profile整合Maven profile"></a>Spring Framework profile整合Maven profile</h3><p>如果想要整合Maven profile和Spring Framework profile，需要在Maven打包时对<code>web.xml</code>中的<code>spring.profiles.active</code>值进行替换，可以在<code>web.xml</code>中配置一个占位符<code>${activeProfile}</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.active<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>$&#123;activeProfile&#125;<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>pom.xml</code>配置<code>maven-war-plugin</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打war包时替换占位符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filteringDeploymentDescriptors</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filteringDeploymentDescriptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认的maven profile --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>product<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>product<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;filteringDeploymentDescriptors&gt;</code>为<code>true</code>表示过滤<code>Deployment Descriptor</code>并将文件中的占位符替换为<code>pom.xml</code>中对应的<code>&lt;properties&gt;</code>值，<code>Deployment Descriptor</code>即部署描述符，指的就是web.xml （参考维基百科：<a href="https://zh.wikipedia.org/wiki/%E9%83%A8%E7%BD%B2%E6%8F%8F%E8%BF%B0%E7%AC%A6" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E9%83%A8%E7%BD%B2%E6%8F%8F%E8%BF%B0%E7%AC%A6</a> ）。</p><p>以上配置完成后，再通过<code>mvn package -Ptest</code>或<code>mvn package -Pproduct</code>打包后，再解压war包，可以看到<code>web.xml</code>中原有的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.active<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>$&#123;activeProfile&#125;<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>被替换为了Maven中对应的profile，例如<code>mvn package -Pproduct</code>打包后<code>web.xml</code>内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>spring.profiles.active<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>product<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上就完成了Maven profile和Spring profile的整合。</p><h3 id="兼容jetty-maven-plugin"><a href="#兼容jetty-maven-plugin" class="headerlink" title="兼容jetty-maven-plugin"></a>兼容jetty-maven-plugin</h3><p>如果恰好在项目中使用到<code>jetty-maven-plugin</code>用于开发环境调试，那么在<code>web.xml</code>配置占位符<code>${activeProfile}</code>后，通过<code>mvn jetty:run</code>启动应用时会Spring框架会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not resolve placeholder &apos;activeProfile&apos; in string value &quot;$&#123;activeProfile&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>这是因为运行<code>mvn jetty:run</code>命令时插件并没有打war包，而是直接使用源码中的<code>web.xml</code>，此时占位符<code>${activeProfile}</code>未被<code>maven-war-plugin</code>替换，所以Spring框架会报错。</p><p>参考文档：<a href="https://www.eclipse.org/jetty/documentation/9.4.x/jetty-maven-plugin.html#jetty-run-goal" target="_blank" rel="noopener">https://www.eclipse.org/jetty/documentation/9.4.x/jetty-maven-plugin.html#jetty-run-goal</a></p><h4 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h4><p>使用<code>mvn jetty:run-war</code>或<code>mvn jetty:run-exploded</code>命令替代<code>mvn jetty:run</code>，这两个命令会先用<code>maven-war-plugin</code>打好war包后再运行，此时占位符<code>${activeProfile}</code>已被替换为Maven的profile。</p><p>但是这种方案会带来一个问题：由于这种方式需要先打war包再运行，开发时项目中资源（例如html、jsp）修改后就不会实时生效，而是需要重新打包启动，不便于调试。</p><h4 id="解决方法二（推荐）"><a href="#解决方法二（推荐）" class="headerlink" title="解决方法二（推荐）"></a>解决方法二（推荐）</h4><p>这种方案还是使用<code>mvn jetty:run</code>命令，只需要给<code>jetty-maven-plugin</code>插件添加一个名为<code>activeProfile</code>的系统属性，让Spring框架来解析<code>web.xml</code>中的<code>${activeProfile}</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;9.2.10.v20150310&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;webApp&gt;</span><br><span class="line">      &lt;contextPath&gt;/&lt;/contextPath&gt;</span><br><span class="line">    &lt;/webApp&gt;</span><br><span class="line">    &lt;systemProperties&gt;</span><br><span class="line">      &lt;systemProperty&gt;</span><br><span class="line">        &lt;name&gt;activeProfile&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;$&#123;activeProfile&#125;&lt;/value&gt;</span><br><span class="line">      &lt;/systemProperty&gt;</span><br><span class="line">    &lt;/systemProperties&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p><p>参考文档：<a href="https://www.eclipse.org/jetty/documentation/9.4.x/jetty-maven-plugin.html#setting-system-properties" target="_blank" rel="noopener">https://www.eclipse.org/jetty/documentation/9.4.x/jetty-maven-plugin.html#setting-system-properties</a></p><h2 id="Spring-Boot整合Maven-profile"><a href="#Spring-Boot整合Maven-profile" class="headerlink" title="Spring Boot整合Maven profile"></a>Spring Boot整合Maven profile</h2><p>如果项目采用的框架是Spring Boot而不是直接使用Spring Framework，那么Spring Boot的profile可以在resources目录下的<code>application.properties</code>或<code>application.yml</code>文件中指定，以<code>application.properties</code>为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=product</span><br></pre></td></tr></table></figure></p><p>要想整合Maven profile只需要改为<code>@activeProfile@</code>占位符即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=@activeProfile@</span><br></pre></td></tr></table></figure></p><p>仅需要这一行配置就完成了Spring Boot profile整合Maven profile，非常方便。此时可以尝试<code>mvn package -Ptest</code>或<code>mvn package -Pproduct</code>命令打包，安装包内的文件中<code>@activeProfile@</code>占位符已被替换。</p><h3 id="Spring-Boot整合Maven-profile原理"><a href="#Spring-Boot整合Maven-profile原理" class="headerlink" title="Spring Boot整合Maven profile原理"></a>Spring Boot整合Maven profile原理</h3><p>Spring Boot项目中一般都会加上<code>spring-boot-starter-parent</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以查看<code>spring-boot-starter-parent</code>的pom.xml文件，里面包含<code>maven-resources-plugin</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>$&#123;resource.delimiter&#125;<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>${resource.delimiter}</code>定义的值是<code>@</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource.delimiter</span>&gt;</span>@<span class="tag">&lt;/<span class="name">resource.delimiter</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样<code>maven-resources-plugin</code>插件会将<code>application.properties</code>或<code>application.yml</code>文件中的<code>@activeProfile@</code>替换为<code>pom.xml</code>中对应profile的值。</p><p>至于为什么Spring Boot要使用<code>@..@</code>而不是Maven默认的<code>${..}</code>作为占位符的符号，官方文档也给出了解释，以下摘自：<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#using-boot-maven" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#using-boot-maven</a></p><blockquote><p>Note that, since the application.properties and application.yml files accept Spring style placeholders (${…​}), the Maven filtering is changed to use @..@ placeholders. (You can override that by setting a Maven property called resource.delimiter.)</p></blockquote><p>因为Spring Boot框架本身也用<code>${..}</code>作为占位符，Maven插件<code>maven-resources-plugin</code>如果还使用相同的占位符，那么可能会导致一些冲突，所以<code>spring-boot-starter-parent</code>将<code>maven-resources-plugin</code>的占位符改为<code>@..@</code>。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/core.html#beans-definition-profiles-enable" target="_blank" rel="noopener">Spring Framework: Activating a Profile</a></li><li><a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#using-boot-maven" target="_blank" rel="noopener">Spring Boot: Maven</a></li><li><a href="https://www.eclipse.org/jetty/documentation/9.4.x/jetty-maven-plugin.html" target="_blank" rel="noopener">Jetty Maven Plugin</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%83%A8%E7%BD%B2%E6%8F%8F%E8%BF%B0%E7%AC%A6" target="_blank" rel="noopener">维基百科：部署描述符（Deployment Descriptor）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Maven和Spring中，都有profile这个概念。profile是用于区分各种环境的，例如开发环境、测试环境、正式环境等。Maven的profile用于在打包时根据指定环境替换不同环境的配置文件配置，如数据库配置。Spring的Profile可以用于在不同的环境下加
      
    
    </summary>
    
      <category term="Maven" scheme="https://xxgblog.com/categories/Maven/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Maven" scheme="https://xxgblog.com/tags/Maven/"/>
    
      <category term="Spring Framework" scheme="https://xxgblog.com/tags/Spring-Framework/"/>
    
      <category term="Spring Boot" scheme="https://xxgblog.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis Generator实现MySQL分页插件</title>
    <link href="https://xxgblog.com/2016/05/06/mybatis-generator-mysql-pagination/"/>
    <id>https://xxgblog.com/2016/05/06/mybatis-generator-mysql-pagination/</id>
    <published>2016-05-06T10:44:09.000Z</published>
    <updated>2016-05-06T10:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis Generator是一个非常方便的代码生成工具，它能够根据表结构生成CRUD代码，可以满足大部分需求。但是唯一让人不爽的是，生成的代码中的数据库查询没有分页功能。本文介绍如何让MyBatis Generator生成的代码具有分页功能。</p><h2 id="MyBatis-Generator结合Maven的配置和使用"><a href="#MyBatis-Generator结合Maven的配置和使用" class="headerlink" title="MyBatis Generator结合Maven的配置和使用"></a>MyBatis Generator结合Maven的配置和使用</h2><p>在实现分页之前，首先简单介绍MyBatis Generator如何使用。</p><h3 id="MyBatis-Generator配置文件"><a href="#MyBatis-Generator配置文件" class="headerlink" title="MyBatis Generator配置文件"></a>MyBatis Generator配置文件</h3><p>MyBatis Generator通常会有一个xml配置文件，用来指定连接的数据库、哪些表、如何生成代码。详情可以参考官方文档：<a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="noopener">http://www.mybatis.org/generator/configreference/xmlconfig.html</a> 。下面给出一份简单的配置，文件命名为generatorConfig.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysqlgenerator"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/yourdb?useUnicode=true&amp;amp;characterEncoding=UTF-8"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">userId</span>=<span class="string">"user"</span> <span class="attr">password</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.xxg.bean"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.xxg.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.xxg.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"table_a"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"table_b"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"table_c"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"table_d"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h3><p>官网文档中提供了四种MyBatis Generator生成代码的运行方式：命令行、使用Ant、使用Maven、Java编码。本文采用Maven插件mybatis-generator-maven-plugin来运行MyBatis Generator，详细配置同样可以参考官方文档：<a href="http://www.mybatis.org/generator/running/runningWithMaven.html" target="_blank" rel="noopener">http://www.mybatis.org/generator/running/runningWithMaven.html</a> 。下面给出一份简单的pom.xml的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上配置完成后，可以通过运行<code>mvn mybatis-generator:generate</code>命令来生成代码。当然，如果只有上面的这些配置，生成的代码是不支持分页的。</p><h2 id="RowBoundsPlugin"><a href="#RowBoundsPlugin" class="headerlink" title="RowBoundsPlugin"></a>RowBoundsPlugin</h2><p>MyBatis Generator可以通过插件机制来扩展其功能，其中RowBoundsPlugin是MyBatis Generator中自带的一个分页插件。可以在MyBatis Generator配置文件generatorConfig.xml中添加这个插件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysqlgenerator"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.RowBoundsPlugin"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再次运行<code>mvn mybatis-generator:generate</code>生成代码，此时会发现生成的Mapper中会加入一个新的方法：<code>selectByExampleWithRowbounds(XxxExample example, RowBounds rowBounds)</code>，可以在代码中调用这个方法来实现分页：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> offset = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> limit = <span class="number">25</span>;</span><br><span class="line">RowBounds rowBounds = <span class="keyword">new</span> RowBounds(offset, limit);</span><br><span class="line">List&lt;Xxx&gt; list = xxxMapper.selectByExampleWithRowbounds(example, rowBounds);</span><br></pre></td></tr></table></figure></p><p>RowBounds的构造方法<code>new RowBounds(offset, limit)</code>中的offset、limit参数就相当于MySQL的select语句limit后的offset和rows。如果此时仔细观察一下日志打出来的SQL语句或者看下生成的XxxMapper.xml文件中的selectByExampleWithRowbounds元素，可以发现select语句并没有使用limit。实际上RowBounds原理是通过ResultSet的游标来实现分页，也就是并不是用select语句的limit分页而是用Java代码分页，查询语句的结果集会包含符合查询条件的所有数据，使用不慎会导致性能问题，所以并不推荐使用RowBoundsPlugin来实现分页。</p><h2 id="limit分页插件实现"><a href="#limit分页插件实现" class="headerlink" title="limit分页插件实现"></a>limit分页插件实现</h2><p>在实现MySQL分页时更推荐使用select语句的limit来实现分页，然而MyBatis Generator目前并没有提供这样的插件。好在MyBatis Generator支持插件扩展，我们可以自己实现一个基于limit来分页的插件。如何实现一个插件可以参考官方文档：<a href="http://www.mybatis.org/generator/reference/pluggingIn.html" target="_blank" rel="noopener">http://www.mybatis.org/generator/reference/pluggingIn.html</a> 。</p><p>###实现思路<br>在生成的XxxExample中加入两个属性limit和offset，同时加上set和get方法。也就是需要生成以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer limit;</span><br><span class="line"><span class="keyword">private</span> Integer offset;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLimit</span><span class="params">(Integer limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.limit = limit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> limit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffset</span><span class="params">(Integer offset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.offset = offset;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getOffset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>XxxMapper.xml中在通过selectByExample查询时，添加limit：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByExample"</span> <span class="attr">parameterType</span>=<span class="string">"com.xxg.bean.XxxExample"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"limit != null"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"offset != null"</span>&gt;</span></span><br><span class="line">      limit $&#123;offset&#125;, $&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"offset == null"</span>&gt;</span></span><br><span class="line">      limit $&#123;limit&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="插件实现代码"><a href="#插件实现代码" class="headerlink" title="插件实现代码"></a>插件实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxg.mybatis.plugins;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.PluginAdapter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Field;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.JavaVisibility;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Method;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Parameter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.PrimitiveTypeWrapper;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.TopLevelClass;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.xml.Attribute;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.xml.TextElement;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.xml.XmlElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLLimitPlugin</span> <span class="keyword">extends</span> <span class="title">PluginAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为每个Example类添加limit和offset属性已经set、get方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelExampleClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PrimitiveTypeWrapper integerWrapper = FullyQualifiedJavaType.getIntInstance().getPrimitiveTypeWrapper();</span><br><span class="line"></span><br><span class="line">Field limit = <span class="keyword">new</span> Field();</span><br><span class="line">limit.setName(<span class="string">"limit"</span>);</span><br><span class="line">limit.setVisibility(JavaVisibility.PRIVATE);</span><br><span class="line">limit.setType(integerWrapper);</span><br><span class="line">topLevelClass.addField(limit);</span><br><span class="line"></span><br><span class="line">Method setLimit = <span class="keyword">new</span> Method();</span><br><span class="line">setLimit.setVisibility(JavaVisibility.PUBLIC);</span><br><span class="line">setLimit.setName(<span class="string">"setLimit"</span>);</span><br><span class="line">setLimit.addParameter(<span class="keyword">new</span> Parameter(integerWrapper, <span class="string">"limit"</span>));</span><br><span class="line">setLimit.addBodyLine(<span class="string">"this.limit = limit;"</span>);</span><br><span class="line">topLevelClass.addMethod(setLimit);</span><br><span class="line"></span><br><span class="line">Method getLimit = <span class="keyword">new</span> Method();</span><br><span class="line">getLimit.setVisibility(JavaVisibility.PUBLIC);</span><br><span class="line">getLimit.setReturnType(integerWrapper);</span><br><span class="line">getLimit.setName(<span class="string">"getLimit"</span>);</span><br><span class="line">getLimit.addBodyLine(<span class="string">"return limit;"</span>);</span><br><span class="line">topLevelClass.addMethod(getLimit);</span><br><span class="line"></span><br><span class="line">Field offset = <span class="keyword">new</span> Field();</span><br><span class="line">offset.setName(<span class="string">"offset"</span>);</span><br><span class="line">offset.setVisibility(JavaVisibility.PRIVATE);</span><br><span class="line">offset.setType(integerWrapper);</span><br><span class="line">topLevelClass.addField(offset);</span><br><span class="line"></span><br><span class="line">Method setOffset = <span class="keyword">new</span> Method();</span><br><span class="line">setOffset.setVisibility(JavaVisibility.PUBLIC);</span><br><span class="line">setOffset.setName(<span class="string">"setOffset"</span>);</span><br><span class="line">setOffset.addParameter(<span class="keyword">new</span> Parameter(integerWrapper, <span class="string">"offset"</span>));</span><br><span class="line">setOffset.addBodyLine(<span class="string">"this.offset = offset;"</span>);</span><br><span class="line">topLevelClass.addMethod(setOffset);</span><br><span class="line"></span><br><span class="line">Method getOffset = <span class="keyword">new</span> Method();</span><br><span class="line">getOffset.setVisibility(JavaVisibility.PUBLIC);</span><br><span class="line">getOffset.setReturnType(integerWrapper);</span><br><span class="line">getOffset.setName(<span class="string">"getOffset"</span>);</span><br><span class="line">getOffset.addBodyLine(<span class="string">"return offset;"</span>);</span><br><span class="line">topLevelClass.addMethod(getOffset);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为Mapper.xml的selectByExample添加limit</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sqlMapSelectByExampleWithoutBLOBsElementGenerated</span><span class="params">(XmlElement element,</span></span></span><br><span class="line"><span class="function"><span class="params">IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">XmlElement ifLimitNotNullElement = <span class="keyword">new</span> XmlElement(<span class="string">"if"</span>);</span><br><span class="line">ifLimitNotNullElement.addAttribute(<span class="keyword">new</span> Attribute(<span class="string">"test"</span>, <span class="string">"limit != null"</span>));</span><br><span class="line"></span><br><span class="line">XmlElement ifOffsetNotNullElement = <span class="keyword">new</span> XmlElement(<span class="string">"if"</span>);</span><br><span class="line">ifOffsetNotNullElement.addAttribute(<span class="keyword">new</span> Attribute(<span class="string">"test"</span>, <span class="string">"offset != null"</span>));</span><br><span class="line">ifOffsetNotNullElement.addElement(<span class="keyword">new</span> TextElement(<span class="string">"limit $&#123;offset&#125;, $&#123;limit&#125;"</span>));</span><br><span class="line">ifLimitNotNullElement.addElement(ifOffsetNotNullElement);</span><br><span class="line"></span><br><span class="line">XmlElement ifOffsetNullElement = <span class="keyword">new</span> XmlElement(<span class="string">"if"</span>);</span><br><span class="line">ifOffsetNullElement.addAttribute(<span class="keyword">new</span> Attribute(<span class="string">"test"</span>, <span class="string">"offset == null"</span>));</span><br><span class="line">ifOffsetNullElement.addElement(<span class="keyword">new</span> TextElement(<span class="string">"limit $&#123;limit&#125;"</span>));</span><br><span class="line">ifLimitNotNullElement.addElement(ifOffsetNullElement);</span><br><span class="line"></span><br><span class="line">element.addElement(ifLimitNotNullElement);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h3><p>在MyBatis Generator配置文件中配置plugin：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysqlgenerator"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"com.xxg.mybatis.plugins.MySQLLimitPlugin"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果直接加上以上配置运行<code>mvn mybatis-generator:generate</code>肯定会出现找不到这个插件的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassNotFoundException: com.xxg.mybatis.plugins.MySQLLimitPlugin</span><br></pre></td></tr></table></figure></p><p>为了方便大家的使用，我已经把插件打包上传到GitHub，可以在pom.xml直接依赖使用：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>mybatis-generator-limit-plugin-mvn-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://raw.github.com/wucao/mybatis-generator-limit-plugin/mvn-repo/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时运行<code>mvn mybatis-generator:generate</code>命令可以成功生成代码。</p><h2 id="使用生成的代码分页"><a href="#使用生成的代码分页" class="headerlink" title="使用生成的代码分页"></a>使用生成的代码分页</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XxxExample example = <span class="keyword">new</span> XxxExample();</span><br><span class="line">...</span><br><span class="line">example.setLimit(<span class="number">10</span>); <span class="comment">// page size limit</span></span><br><span class="line">example.setOffset(<span class="number">20</span>); <span class="comment">// offset</span></span><br><span class="line">List&lt;Xxx&gt; list = xxxMapper.selectByExample(example);</span><br></pre></td></tr></table></figure><p>以上代码运行时执行的SQL是：<code>select ... limit 20, 10</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XxxExample example = <span class="keyword">new</span> XxxExample();</span><br><span class="line">...</span><br><span class="line">example.setLimit(<span class="number">10</span>); <span class="comment">// limit</span></span><br><span class="line">List&lt;Xxx&gt; list = xxxMapper.selectByExample(example);</span><br></pre></td></tr></table></figure></p><p>以上代码运行时执行的SQL是：<code>select ... limit 10</code>。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>如果你对插件的实现原理不感兴趣，只想直接使用这个插件，那么可以在我的GitHub上查看使用文档，另外源代码也在里面：</p><p><a href="https://github.com/wucao/mybatis-generator-limit-plugin" target="_blank" rel="noopener">https://github.com/wucao/mybatis-generator-limit-plugin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MyBatis Generator是一个非常方便的代码生成工具，它能够根据表结构生成CRUD代码，可以满足大部分需求。但是唯一让人不爽的是，生成的代码中的数据库查询没有分页功能。本文介绍如何让MyBatis Generator生成的代码具有分页功能。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="MyBatis" scheme="https://xxgblog.com/categories/MyBatis/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Maven" scheme="https://xxgblog.com/tags/Maven/"/>
    
      <category term="MySQL" scheme="https://xxgblog.com/tags/MySQL/"/>
    
      <category term="MyBatis" scheme="https://xxgblog.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Maven profile结合Maven AntRun Plugin实现不同环境配置文件分离打包</title>
    <link href="https://xxgblog.com/2016/05/05/maven-profile-antrun/"/>
    <id>https://xxgblog.com/2016/05/05/maven-profile-antrun/</id>
    <published>2016-05-05T09:14:09.000Z</published>
    <updated>2016-06-01T03:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Java项目中通常会有各种配置文件，例如有xml、properties。在不同的环境下配置文件的内容可能会不一样，例如正式环境、测试环境、开发环境连的不是同一个数据库，访问的接口不一样，或者日志的级别不同。如果每次部署不同环境时都要改配置文件的各种配置是非常麻烦的。在这种情况下，可以将这些配置文为每个环境复制一个，分别配置不同的内容，打包部署时不同环境的包中打入对应的配置文件。下面是一个通过Maven的profile结合Maven AntRun Plugin实现的方案。</p><h2 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h2><p>在Maven项目的pom.xml中加入以下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>product<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">"$&#123;basedir&#125;/target/classes/"</span> <span class="attr">overwrite</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;basedir&#125;/src/main/resources/distribute/product/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">copy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">"$&#123;basedir&#125;/target/classes/"</span> <span class="attr">overwrite</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;basedir&#125;/src/main/resources/distribute/test/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">copy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的配置中加入了id为product、test两个profile，分别表示正式环境和测试环境，两块的配置基本相同，只看其中之一即可。其中profile的id可以自定义，如果除了这两个环境外还有其他环境的话可以自行添加。</p><p>在每个profile中使用了maven-antrun-plugin插件，<code>&lt;phase&gt;compile&lt;/phase&gt;</code>表示在编译阶段，<code>&lt;target&gt;...&lt;/target&gt;</code>表示要执行的任务。即在编译是将<code>dir=&quot;${basedir}/src/main/resources/distribute/product/&quot;</code>目录下的文件拷贝到<code>todir=&quot;${basedir}/target/classes/&quot;</code>目录中，<code>overwrite=&quot;true&quot;</code>表示如果文件重复则覆盖。</p><h2 id="不同环境的配置文件位置"><a href="#不同环境的配置文件位置" class="headerlink" title="不同环境的配置文件位置"></a>不同环境的配置文件位置</h2><p>如果项目中有配置文件，一般是放在src/main/resources目录下：<br><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20160505183716222.jpg" alt="配置文件目录结构"><br>在src/main/resources目录下新建distribute/product和distribute/test目录，将跟环境相关的配置文件复制到这两个目录中，根据环境修改配置文件内容。完成后目录结构如下：<br><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20160505183716156.jpg" alt="配置文件目录结构"></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>Maven打包使用<code>mvn package</code>命令，如果是打不同环境的包，可以加上参数<code>-P</code>加上profile的id，例如正式环境可以通过<code>mvn package -P product</code>来打包，测试环境可以通过<code>mvn package -P test</code>来打包，此时就会执行profile中配置的maven-antrun-plugin插件，完成配置文件的拷贝和覆盖，最终打出来的包中的配置文件是这个环境对应的配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java项目中通常会有各种配置文件，例如有xml、properties。在不同的环境下配置文件的内容可能会不一样，例如正式环境、测试环境、开发环境连的不是同一个数据库，访问的接口不一样，或者日志的级别不同。如果每次部署不同环境时都要改配置文件的各种配置是非常麻烦的。在这种
      
    
    </summary>
    
      <category term="Maven" scheme="https://xxgblog.com/categories/Maven/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="Maven" scheme="https://xxgblog.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>如何线程安全地遍历List：Vector、CopyOnWriteArrayList</title>
    <link href="https://xxgblog.com/2016/04/02/traverse-list-thread-safe/"/>
    <id>https://xxgblog.com/2016/04/02/traverse-list-thread-safe/</id>
    <published>2016-04-02T12:14:16.000Z</published>
    <updated>2019-11-03T13:55:47.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遍历List的多种方式"><a href="#遍历List的多种方式" class="headerlink" title="遍历List的多种方式"></a>遍历List的多种方式</h2><p>在讲如何线程安全地遍历 <code>List</code> 之前，先看看遍历一个 <code>List</code> 通常会采用哪些方式。</p><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三："><a href="#方式三：" class="headerlink" title="方式三："></a>方式三：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object item : list) &#123;</span><br><span class="line">System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式四（Java-8）："><a href="#方式四（Java-8）：" class="headerlink" title="方式四（Java 8）："></a>方式四（Java 8）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object item)</span> </span>&#123;</span><br><span class="line">System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="方式五（Java-8-Lambda）："><a href="#方式五（Java-8-Lambda）：" class="headerlink" title="方式五（Java 8 Lambda）："></a>方式五（Java 8 Lambda）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(item -&gt; &#123;</span><br><span class="line">System.out.println(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方式一的遍历方法对于 <code>RandomAccess</code> 接口的实现类（例如 <code>ArrayList</code>）来说是一种性能很好的遍历方式。但是对于 <code>LinkedList</code> 这样的基于链表实现的 <code>List</code>，通过 <code>list.get(i)</code> 获取元素的性能差。</p><p>方式二和方式三两种方式的本质是一样的，都是通过 <code>Iterator</code> 迭代器来实现的遍历，方式三是增强版的 <code>for</code> 循环，可以看作是方式二的简化形式。</p><p>方式四和方式五本质也是一样的，都是使用Java 8新增的 <code>forEach</code> 方法来遍历。方式五是方式四的一种简化形式，使用了Lambda表达式。</p><h2 id="遍历List的同时操作List会发生什么？"><a href="#遍历List的同时操作List会发生什么？" class="headerlink" title="遍历List的同时操作List会发生什么？"></a>遍历List的同时操作List会发生什么？</h2><p>先用非线程安全的 <code>ArrayList</code> 做个试验，用一个线程通过增强的 <code>for</code> 循环遍历 <code>List</code>，遍历的同时另一个线程删除 <code>List</code> 中的一个元素，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个list，放入5个元素</span></span><br><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程一：通过Iterator遍历List</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> item : list) &#123;</span><br><span class="line">System.out.println(<span class="string">"遍历元素："</span> + item);</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程二：remove一个元素</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.remove(<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">"list.remove(4)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><em>遍历元素：0</em><br><em>遍历元素：1</em><br><em>list.remove(4)</em><br><em>Exception in thread “Thread-0” java.util.ConcurrentModificationException</em></p><p>线程一在遍历到第二个元素时，线程二删除了一个元素，此时程序出现异常： <code>ConcurrentModificationException</code> 。</p><p>当一个 <code>List</code> 正在通过迭代器遍历时，同时另外一个线程对这个 <code>List</code> 进行修改，就会发生异常。</p><h2 id="使用线程安全的Vector"><a href="#使用线程安全的Vector" class="headerlink" title="使用线程安全的Vector"></a>使用线程安全的Vector</h2><p><code>ArrayList</code> 是非线程安全的，<code>Vector</code> 是线程安全的，那么把 <code>ArrayList</code> 换成 <code>Vector</code> 是不是就可以线程安全地遍历了？</p><p>将程序中的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></p><p>改成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br></pre></td></tr></table></figure></p><p>再运行一次试试，会发现结果和 <code>ArrayList</code> 一样会抛出 <code>ConcurrentModificationException</code> 异常。</p><p>为什么线程安全的 <code>Vector</code> 也不能线程安全地遍历呢？其实道理也很简单，看 <code>Vector</code> 源码可以发现它的很多方法都加上了 <code>synchronized</code> 来进行线程同步，例如 <code>add()</code>、<code>remove()</code>、<code>set()</code>、<code>get()</code>，但是 <code>Vector</code> 内部的 <code>synchronized</code> 方法无法控制到外部遍历操作，所以即使是线程安全的 <code>Vector</code> 也无法做到线程安全地遍历。</p><p>如果想要线程安全地遍历 <code>Vector</code>，需要我们去手动在遍历时给 <code>Vector</code> 加上 <code>synchronized</code> 锁，防止遍历的同时进行 <code>remove</code> 操作。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个list，放入5个元素</span></span><br><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程一：通过Iterator遍历List</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// synchronized来锁住list，remove操作会在遍历完成释放锁后进行</span></span><br><span class="line"><span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> item : list) &#123;</span><br><span class="line">System.out.println(<span class="string">"遍历元素："</span> + item);</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程二：remove一个元素</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.remove(<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">"list.remove(4)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><em>遍历元素：0</em><br><em>遍历元素：1</em><br><em>遍历元素：2</em><br><em>遍历元素：3</em><br><em>遍历元素：4</em><br><em>list.remove(4)</em></p><p>运行结果显示 <code>list.remove(4)</code> 的操作是等待遍历完成后再进行的。</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p><code>CopyOnWriteArrayList</code> 是 <code>java.util.concurrent</code> 包中的一个 <code>List</code> 的实现类。<code>CopyOnWrite</code> 的意思是在写时拷贝，也就是如果需要对<code>CopyOnWriteArrayList</code> 的内容进行改变，首先会拷贝一份新的 <code>List</code> 并且在新的 <code>List</code> 上进行修改，最后将原 <code>List</code> 的引用指向新的 <code>List</code>。</p><p>使用 <code>CopyOnWriteArrayList</code> 可以线程安全地遍历，因为如果另外一个线程在遍历的时候修改 <code>List</code> 的话，实际上会拷贝出一个新的 <code>List</code> 上修改，而不影响当前正在被遍历的 <code>List</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个list，放入5个元素</span></span><br><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程一：通过Iterator遍历List</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> item : list) &#123;</span><br><span class="line">System.out.println(<span class="string">"遍历元素："</span> + item);</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程二：remove一个元素</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.remove(<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">"list.remove(4)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><em>遍历元素：0</em><br><em>遍历元素：1</em><br><em>list.remove(4)</em><br><em>遍历元素：2</em><br><em>遍历元素：3</em><br><em>遍历元素：4</em></p><p>从上面的运行结果可以看出，虽然<code>list.remove(4)</code>已经移除了一个元素，但是遍历的结果还是存在这个元素。由此可以看出被遍历的和 <code>remove</code> 的是两个不同的 <code>List</code>。</p><h2 id="线程安全的List-forEach"><a href="#线程安全的List-forEach" class="headerlink" title="线程安全的List.forEach"></a>线程安全的List.forEach</h2><p><code>List.forEach</code> 方法是Java 8新增的一个方法，主要目的还是用于让 <code>List</code> 来支持Java 8的新特性：Lambda表达式。</p><p>由于 <code>forEach</code> 方法是 <code>List</code> 内部的一个方法，所以不同于在 <code>List</code> 外遍历 <code>List</code> ，<code>forEach</code> 方法相当于 <code>List</code> 自身遍历的方法，所以它可以自由控制是否线程安全。</p><p>我们看线程安全的 <code>Vector</code> 的 <code>forEach</code> 方法源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到 <code>Vector</code> 的 <code>forEach</code> 方法上加了 <code>synchronized</code> 来控制线程安全的遍历，也就是<strong>Vector的forEach方法可以线程安全地遍历</strong>。</p><p>下面可以测试一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个list，放入5个元素</span></span><br><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程一：通过Iterator遍历List</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">list.forEach(item -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"遍历元素："</span> + item);</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程二：remove一个元素</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 由于程序跑的太快，这里sleep了1秒来调慢程序的运行速度</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.remove(<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">"list.remove(4)"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><em>遍历元素：0</em><br><em>遍历元素：1</em><br><em>遍历元素：2</em><br><em>遍历元素：3</em><br><em>遍历元素：4</em><br><em>list.remove(4)</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;遍历List的多种方式&quot;&gt;&lt;a href=&quot;#遍历List的多种方式&quot; class=&quot;headerlink&quot; title=&quot;遍历List的多种方式&quot;&gt;&lt;/a&gt;遍历List的多种方式&lt;/h2&gt;&lt;p&gt;在讲如何线程安全地遍历 &lt;code&gt;List&lt;/code&gt; 之前，先
      
    
    </summary>
    
      <category term="Java" scheme="https://xxgblog.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="线程" scheme="https://xxgblog.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Async.js解决Node.js操作MySQL的回调大坑</title>
    <link href="https://xxgblog.com/2015/12/22/nodejs-async-mysql/"/>
    <id>https://xxgblog.com/2015/12/22/nodejs-async-mysql/</id>
    <published>2015-12-22T02:19:16.000Z</published>
    <updated>2016-01-06T05:16:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于JavaScript语言异步特性，在使用Node.js执行很多操作时都会使用到回调函数，其中就包括访问数据库。如果代码中的业务逻辑稍微复杂一点，回调一层层嵌套，那么代码很容易进入Callback Hell，无论对写代码的人还是阅读代码的人，都是精神上的折磨。</p><p>例如对MySQL的一个事务操作，插入一条posts并插入一条log：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="string">'It is a new post'</span>;</span><br><span class="line"></span><br><span class="line">connection.beginTransaction(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">throw</span> err; &#125;</span><br><span class="line">  connection.query(<span class="string">'INSERT INTO posts SET title=?'</span>, title, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> connection.rollback(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> log = <span class="string">'Post '</span> + result.insertId + <span class="string">' added'</span>;</span><br><span class="line"></span><br><span class="line">    connection.query(<span class="string">'INSERT INTO log SET data=?'</span>, log, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> connection.rollback(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      connection.commit(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> connection.rollback(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success!'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>以上非常简单的一个业务逻辑，已经回调了好几层了，如果稍微再复杂一点，那么代码恐怕就无法直视了。</p><p>为了防止发生多层嵌套回调的大坑，可以使用<a href="https://github.com/caolan/async" target="_blank" rel="noopener">Async.js</a>来解决这个问题。下面来介绍Async.js结合操作MySQL数据库的使用。</p><h2 id="async-each批量Insert"><a href="#async-each批量Insert" class="headerlink" title="async.each批量Insert"></a>async.each批量Insert</h2><p>假设需求是向log表中插入多条数据，最终返回执行结果，可以使用async.each函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sqls = [</span><br><span class="line">  <span class="string">"INSERT INTO log SET data='data1'"</span>,</span><br><span class="line">  <span class="string">"INSERT INTO log SET data='data2'"</span>,</span><br><span class="line">  <span class="string">"INSERT INTO log SET data='data3'"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.each(sqls, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历每条SQL并执行</span></span><br><span class="line">  connection.query(item, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="comment">// 异常后调用callback并传入err</span></span><br><span class="line">      callback(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item + <span class="string">"执行成功"</span>);</span><br><span class="line">      <span class="comment">// 执行完成后也要调用callback，不需要参数</span></span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 所有SQL执行完成后回调</span></span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SQL全部执行成功"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>async.each并不能保证执行成功一条SQL语句后再去执行下一条，所以如果有一条执行失败，不会影响到其他语句的执行。</p><h2 id="async-eachSeries按顺序批量Insert"><a href="#async-eachSeries按顺序批量Insert" class="headerlink" title="async.eachSeries按顺序批量Insert"></a>async.eachSeries按顺序批量Insert</h2><p>如果想要实现执行成功上一条语句后再开始执行数组中下一条语句，可以使用eachSeries函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sqls = [</span><br><span class="line">  <span class="string">"INSERT INTO log SET data='data1'"</span>,</span><br><span class="line">  <span class="string">"INSERT INTO log SET data='data2'"</span>,</span><br><span class="line">  <span class="string">"INSERT INTO log SET data='data3'"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.eachSeries(sqls, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历每条SQL并执行</span></span><br><span class="line">  connection.query(item, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="comment">// 异常后调用callback并传入err</span></span><br><span class="line">      callback(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item + <span class="string">"执行成功"</span>);</span><br><span class="line">      <span class="comment">// 执行完成后也要调用callback，不需要参数</span></span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 所有SQL执行完成后回调</span></span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SQL全部执行成功"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>async.eachSeries保证了SQL的执行顺序，而且当其中一条执行异常，就不会继续执行下一条。</p><h2 id="async-forEachOf获取多条Select语句的查询结果"><a href="#async-forEachOf获取多条Select语句的查询结果" class="headerlink" title="async.forEachOf获取多条Select语句的查询结果"></a>async.forEachOf获取多条Select语句的查询结果</h2><p>async.forEachOf类似于async.each，区别是可以接收Object类型参数，并且会在第二个参数回调函数中传入遍历到的每一项的key，更适合批量执行查询语句并返回结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sqls = &#123;</span><br><span class="line">  table_a: <span class="string">"select count(*) from table_a"</span>,</span><br><span class="line">  table_b: <span class="string">"select count(*) from table_b"</span>,</span><br><span class="line">  table_c: <span class="string">"select count(*) from table_c"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于存放查询结果</span></span><br><span class="line"><span class="keyword">var</span> counts = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.forEachOf(sqls, <span class="function"><span class="keyword">function</span>(<span class="params">value, key, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历每条SQL并执行</span></span><br><span class="line">  connection.query(value, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      callback(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      counts[key] = results[<span class="number">0</span>][<span class="string">'count(*)'</span>];</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 所有SQL执行完成后回调</span></span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(counts);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><em>{ table_a: 26, table_b: 3, table_c: 2 }</em></p><h2 id="async-map简化获取多条Select语句的查询结果"><a href="#async-map简化获取多条Select语句的查询结果" class="headerlink" title="async.map简化获取多条Select语句的查询结果"></a>async.map简化获取多条Select语句的查询结果</h2><p>上面的async.forEachOf获取多条Select语句的查询结果的代码可以使用async.map函数简化成这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sqls = &#123;</span><br><span class="line">  table_a: <span class="string">"select count(*) from table_a"</span>,</span><br><span class="line">  table_b: <span class="string">"select count(*) from table_b"</span>,</span><br><span class="line">  table_c: <span class="string">"select count(*) from table_c"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.map(sqls, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</span><br><span class="line">  connection.query(item, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    callback(err, results[<span class="number">0</span>][<span class="string">'count(*)'</span>]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><em>{ table_a: 26, table_b: 3, table_c: 2 }</em></p><h2 id="async-series按顺序执行多条任务"><a href="#async-series按顺序执行多条任务" class="headerlink" title="async.series按顺序执行多条任务"></a>async.series按顺序执行多条任务</h2><p>Async.js非常实用的一个功能就是流程控制。回到本文刚开始的那个开启事务执行Insert的例子，每一步都需要上一步执行成功后才能执行，很容易掉进回调大坑中。下面实用async.series函数来优化流程控制，让代码更优雅：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="string">'It is a new post'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于在posts插入成功后保存自动生成的ID</span></span><br><span class="line"><span class="keyword">var</span> postId = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function数组，需要执行的任务列表，每个function都有一个参数callback函数并且要调用</span></span><br><span class="line"><span class="keyword">var</span> tasks = [<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 开启事务</span></span><br><span class="line">  connection.beginTransaction(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 插入posts</span></span><br><span class="line">  connection.query(<span class="string">'INSERT INTO posts SET title=?'</span>, title, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    postId = result.insertId;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 插入log</span></span><br><span class="line">  <span class="keyword">var</span> log = <span class="string">'Post '</span> + postId + <span class="string">' added'</span>;</span><br><span class="line">  connection.query(<span class="string">'INSERT INTO log SET data=?'</span>, log, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 提交事务</span></span><br><span class="line">  connection.commit(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.series(tasks, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    connection.rollback(); <span class="comment">// 发生错误事务回滚</span></span><br><span class="line">  &#125;</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="async-waterfall按顺序执行多条任务并且下一条任务可获取上一条任务的执行结果"><a href="#async-waterfall按顺序执行多条任务并且下一条任务可获取上一条任务的执行结果" class="headerlink" title="async.waterfall按顺序执行多条任务并且下一条任务可获取上一条任务的执行结果"></a>async.waterfall按顺序执行多条任务并且下一条任务可获取上一条任务的执行结果</h2><p>上面使用async.series按顺序执行多条任务，但是很多情况下执行一个任务的时候需要用到上一条任务的相关数据，例如插入一条数据到posts表后，会自动生成ID，下一步插入日志会用到这个ID，如果使用async.series函数就需要定义一个变量<code>var postId</code>来存储这个ID，此时可使用async.waterfall来替代async.series。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="string">'It is a new post'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tasks = [<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  connection.beginTransaction(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  connection.query(<span class="string">'INSERT INTO posts SET title=?'</span>, title, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    callback(err, result.insertId); <span class="comment">// 生成的ID会传给下一个任务</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">insertId, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接收到上一条任务生成的ID</span></span><br><span class="line">  <span class="keyword">var</span> log = <span class="string">'Post '</span> + insertId + <span class="string">' added'</span>;</span><br><span class="line">  connection.query(<span class="string">'INSERT INTO log SET data=?'</span>, log, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  connection.commit(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.waterfall(tasks, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    connection.rollback(); <span class="comment">// 发生错误事务回滚</span></span><br><span class="line">  &#125;</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="async-series按顺序获取多条SQL的结果"><a href="#async-series按顺序获取多条SQL的结果" class="headerlink" title="async.series按顺序获取多条SQL的结果"></a>async.series按顺序获取多条SQL的结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tasks是一个Object</span></span><br><span class="line"><span class="keyword">var</span> tasks = &#123;</span><br><span class="line">  table_a: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    connection.query(<span class="string">'select count(*) from table_a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      callback(err, result[<span class="number">0</span>][<span class="string">'count(*)'</span>]); <span class="comment">// 将结果传入callback</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  table_b: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    connection.query(<span class="string">'select count(*) from table_b'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      callback(err, result[<span class="number">0</span>][<span class="string">'count(*)'</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  table_c: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    connection.query(<span class="string">'select count(*) from table_c'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      callback(err, result[<span class="number">0</span>][<span class="string">'count(*)'</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.series(tasks, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">  &#125;</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：<br><em>{ table_a: 26, table_b: 3, table_c: 2 }</em></p><p>以上是Async.js操作数据库经常会用到的一些例子，用上它的话就不再需要担心异步回调的坑了。Async.js不仅仅可以用于数据库操作，其他用到异步回调函数的地方都可以使用，例如文件读写等，而且还可以在浏览器上使用，本文只是通过数据库操作为例来介绍Async.js基本用法。除了上面介绍的几个函数外，Async.js还提供了一些其他实用的函数，可以参考文档灵活使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于JavaScript语言异步特性，在使用Node.js执行很多操作时都会使用到回调函数，其中就包括访问数据库。如果代码中的业务逻辑稍微复杂一点，回调一层层嵌套，那么代码很容易进入Callback Hell，无论对写代码的人还是阅读代码的人，都是精神上的折磨。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Node.js" scheme="https://xxgblog.com/categories/Node-js/"/>
    
    
      <category term="JavaScript" scheme="https://xxgblog.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="https://xxgblog.com/tags/Node-js/"/>
    
      <category term="Async.js" scheme="https://xxgblog.com/tags/Async-js/"/>
    
  </entry>
  
  <entry>
    <title>Java WebSocket + tail命令实现Web实时日志</title>
    <link href="https://xxgblog.com/2015/11/25/java-websocket-tail/"/>
    <id>https://xxgblog.com/2015/11/25/java-websocket-tail/</id>
    <published>2015-11-25T03:14:16.000Z</published>
    <updated>2015-11-26T04:23:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux操作系统中，经常需要查看日志文件的实时输出内容，通常会使用<code>tail -f</code>或者<code>tailf</code>命令。查看实时日志可能会需要首先SSH连上Linux主机，步骤很麻烦不说，如果是生产环境的服务器，可能还会控制各种权限。此时可以考虑基于Web显示实时日志。</p><p>由于传统的HTTP协议是请求/响应模式，而实时日志需要不定时的持续的输出，有新的日志内容时需要由服务器主动推送给客户端浏览器。所以这里使用的是HTML5的WebSocket协议。</p><p>按照惯例，先上图：<br><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20151125195638286.jpg" alt="Web实时日志"></p><h2 id="Java后台"><a href="#Java后台" class="headerlink" title="Java后台"></a>Java后台</h2><p>JSR 356是Java实现WebSocket的一套规范，所以首先需要准备一个支持JSR 356的服务器，例如Tomcat、Jetty的最新版本。</p><p>JSR 356提供了注解<code>@ServerEndpoint</code>，并需要指定一个路径，用于处理客户端WebSocket请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/log"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogWebSocketHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Process process;</span><br><span class="line"><span class="keyword">private</span> InputStream inputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新的WebSocket请求开启</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@OnOpen</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行tail -f命令</span></span><br><span class="line">process = Runtime.getRuntime().exec(<span class="string">"tail -f /var/log/syslog"</span>);</span><br><span class="line">inputStream = process.getInputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要启动新的线程，防止InputStream阻塞处理WebSocket的线程</span></span><br><span class="line">TailLogThread thread = <span class="keyword">new</span> TailLogThread(inputStream, session);</span><br><span class="line">thread.start();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSocket请求关闭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@OnClose</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(inputStream != <span class="keyword">null</span>)</span><br><span class="line">inputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(process != <span class="keyword">null</span>)</span><br><span class="line">process.destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnError</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable thr)</span> </span>&#123;</span><br><span class="line">thr.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于针对每个WebSocket连接都会创建一个新的LogWebSocketHandle实例，所以可以不用像Servlet一样考虑线程安全问题。由于<code>tail -f</code>命令的输入流会阻塞当前线程，所以一定要创建一个新的线程来读取<code>tail -f</code>命令的返回结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TailLogThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"><span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TailLogThread</span><span class="params">(InputStream in, Session session)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line"><span class="keyword">this</span>.session = session;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 将实时日志通过WebSocket发送给客户端，给每一行添加一个HTML换行</span></span><br><span class="line">session.getBasicRemote().sendText(line + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><p>Web前端需要通过WebSocket连接到服务端，实时接收最新的日志内容并展示到页面上。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>tail log<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/2.1.4/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"log-container"</span> <span class="attr">style</span>=<span class="string">"height: 450px; overflow-y: scroll; background: #333; color: #aaa; padding: 10px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">$(document).ready(function() &#123;</span></span><br><span class="line"><span class="undefined">// 指定websocket路径</span></span><br><span class="line"><span class="undefined">var websocket = new WebSocket('ws://localhost:8080/log');</span></span><br><span class="line"><span class="undefined">websocket.onmessage = function(event) &#123;</span></span><br><span class="line"><span class="undefined">// 接收服务端的实时日志并添加到HTML页面中</span></span><br><span class="line"><span class="undefined">$("#log-container div").append(event.data);</span></span><br><span class="line"><span class="undefined">// 滚动条滚动到最低部</span></span><br><span class="line"><span class="undefined">$("#log-container").scrollTop($("#log-container div").height() - $("#log-container").height());</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>完成编码后，就可以部署了。由于用到<code>tail</code>命令，该项目需要部署在Linux系统上。</p><p>Demo on GitHub: <a href="https://github.com/wucao/websocket-tail-demo" target="_blank" rel="noopener">https://github.com/wucao/websocket-tail-demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Linux操作系统中，经常需要查看日志文件的实时输出内容，通常会使用&lt;code&gt;tail -f&lt;/code&gt;或者&lt;code&gt;tailf&lt;/code&gt;命令。查看实时日志可能会需要首先SSH连上Linux主机，步骤很麻烦不说，如果是生产环境的服务器，可能还会控制各种权限。此时
      
    
    </summary>
    
      <category term="Java" scheme="https://xxgblog.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://xxgblog.com/tags/Java/"/>
    
      <category term="WebSocket" scheme="https://xxgblog.com/tags/WebSocket/"/>
    
  </entry>
  
</feed>
